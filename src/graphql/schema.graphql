schema {
  query: Query
}

type AuditInfo {
  createdUserId: String
  modifiedUserId: String
  createdDate: String
  modifiedDate: String
}

type ClusterComposite {
  text: String
  label: String
  questionCode: String
  isPlaceholder: Boolean
  uomCode: String
  objectType: String
  items: [ClusterComposite]
}

type CombinationElement {
  id: Int
  factorLevelId: Int
  treatmentId: Int
  auditInfo: AuditInfo
  factorLevel: FactorLevel
}

enum Criteria {
  owner
}

type DependentVariable {
  id: Int
  name: String
  required: Boolean
  questionCode: String
  experimentId: Int
  auditInfo: AuditInfo
}

type DesignSpecificationDetail {
  locations: String
  minRep: String
  repDimensionX: String
  repDimensionY: String
  repRangeMin: String
  repRangeMax: String
  reps: String
}

type Experiment {
  id: Int
  name: String
  description: String
  randomizationStrategyCode: String
  status: String
  capacityRequestSyncDate: String
  auditInfo: AuditInfo
  dependentVariables: [DependentVariable]
  designSpecifications: [DesignSpecificationDetail]
  factors: [Factor]
  groups: [Group]
  owners: Owner
  treatments: [Treatment]
  unitSpecificationDetails: [UnitSpecificationDetail]
  units: [ExperimentalUnit]
}

type ExperimentalSet {
  groupId: String
  experimentId: Int
  refRandomizationStrategyId: Int
  refGroupTypeId: Int
  setId: Int
  groupValues: [GroupValue]
  setEntries: [ExperimentalUnit]
}

type ExperimentalUnit {
  id: Int
  treatmentId: Int
  location: Int
  rep: Int
  setEntryId: Int
  block: Int
}

type ExperimentInfo {
  id: Int
  name: String
  description: String
  status: String
  capacityRequestSyncDate: String
  randomizationStrategyCode: String
  auditInfo: AuditInfo
  owners: Owner
}

type Factor {
  id: Int
  name: String
  experimentId: Int
  refFactorTypeId: Int
  tier: Int
  auditInfo: AuditInfo
  factorType: FactorType
  factorLevels: [FactorLevel]
}

type FactorLevel {
  id: Int
  value: FactorLevelValue
  valueJSON: JSON
  factorId: Int
  auditInfo: AuditInfo
  factor: Factor
  nestedLevels: [FactorLevel]
  associatedLevels: [FactorLevel]
}

type FactorLevelValue {
  items: [ClusterComposite]
  objectType: String
}

type FactorType {
  id: Int
  type: String
}

type Group {
  id: String
  experimentId: Int
  parentId: String
  refRandomizationStrategyId: Int @deprecated(reason: "This is now sourced from DesignSpecificationDetail and is here only for backwards compatibility until the next major version release.")
  refGroupTypeId: Int
  setId: Int
  groupValues: [GroupValue]
}

type GroupValue {
  id: Int
  name: String
  value: String
  factorLevelId: Int
  groupId: String
}

scalar JSON

type Owner {
  id: Int
  experimentId: Int
  userIds: [String]
  groupIds: [String]
  auditInfo: AuditInfo
}

type Query {
  getExperimentById(id: Int!): Experiment
  getExperimentsByCriteria(criteria: Criteria!, value: [String!]!): [Experiment]
  getExperimentsByName(name: String!): [Experiment]
  getExperimentBySetId(setId: Int): [ExperimentInfo]
  getTemplateById(id: Int!): Experiment
  getAllExperiments: [ExperimentInfo]
  getAllTemplates: [ExperimentInfo]
  getTemplatesByCriteria(criteria: Criteria!, value: [String!]!): [Experiment]
  getFactorsByExperimentId(experimentId: Int!): [Factor]
  getTreatmentsByExperimentId(experimentId: Int!): [Treatment]
  getUnitSpecificationDetailsByExperimentId(experimentId: Int!): [UnitSpecificationDetail]
  getDesignSpecificationDetailsByExperimentId(experimentId: Int!): [DesignSpecificationDetail]
  getGroupsByExperimentId(experimentId: Int!): [Group]
  getUnitsByExperimentId(experimentId: Int!): [ExperimentalUnit]
  getSetBySetId(setId: Int!): ExperimentalSet
  getSetEntriesBySetId(setId: Int!): [ExperimentalUnit]
  getTreatmentsBySetId(setId: Int!): [Treatment]
}

type Treatment {
  id: Int
  experimentId: Int
  isControl: String
  treatmentNumber: Int
  notes: String
  inAllBlocks: Boolean,
  block: Int,
  auditInfo: AuditInfo
  combinationElements: [CombinationElement]
}

type UnitSpecification {
  id: Int
  name: String
  uomType: String
  refUnitTypeId: Int
  unitType: UnitType
}

type UnitSpecificationDetail {
  id: Int
  value: String
  uomId: Int
  refUnitSpecId: Int
  experimentId: Int
  auditInfo: AuditInfo
  unitSpecification: UnitSpecification
}

type UnitType {
  id: Int
  name: String
}
