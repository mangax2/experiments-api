{
  "swagger": "2.0",
  "info": {
    "title": "Experiments API",
    "description": "Experiment APIs to create experiment model, requires oauth_resourceownerinfo http header",
    "version": "v2"
  },
  "host": "api01-np.agro.services",
  "schemes": [
    "https"
  ],
  "basePath": "/experiments-api",
  "paths": {
    "/combination-elements/{id}": {
      "get": {
        "summary": "get one combination-element entity",
        "description": "The combination-elements endpoint returns information about the combination elements entity in Experiments System.\n",
        "operationId": "getCombination-elementsById",
        "tags": [
          "Combination Elements"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "combination-element entity",
            "schema": {
              "$ref": "#/definitions/CombinationElementResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Combination Element Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dependent-variables/{id}": {
      "get": {
        "summary": "get one dependent variable entity",
        "description": "The dependent variables endpoint returns information about the dependent variable entities in Experiments System.\n",
        "operationId": "getDependent-variablesById",
        "tags": [
          "Dependent Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "dependent Variable entity",
            "schema": {
              "$ref": "#/definitions/DependentVariableResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Dependent Variable Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/design-specification-details/{id}": {
      "get": {
        "summary": "Get one design specification detail entity by id",
        "description": "Returns specification detail entity by id",
        "operationId": "getDesign-specification-detailsById",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design Specification Detail Entities",
            "schema": {
              "$ref": "#/definitions/DesignSpecificationDetail"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experimental-units/{id}": {
      "get": {
        "summary": "get one experimental unit entity",
        "description": "The experimental-units endpoint returns information about the experimental unit entity in Experiments System.\n",
        "operationId": "getExperimental-unitsById",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experimental Unit entity",
            "schema": {
              "$ref": "#/definitions/ExperimentalUnitResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experimental Unit Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/groups": {
      "get": {
        "summary": "Get all groups by experiment id",
        "description": "Returns all groups for experiment\n",
        "operationId": "getGroupsByExperimentId",
        "tags": [
          "Groups"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of groups",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "partially update group",
        "description": "Allows for groups to be partially updated. Currently only allows the update of the setId field.",
        "operationId": "patchGroup",
        "tags": [
          "Groups"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Group",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupPayloadForPATCH"
              }
            },
            "description": "The Group to patch"
          }
        ],
        "responses": {
          "200": {
            "description": "Group Patch SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/experiment-designs": {
      "get": {
        "summary": "Get all experiment designs",
        "description": "Returns all experiment designs that can be used\n",
        "operationId": "getExperiment-designs",
        "tags": [
          "Experiment Designs"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Array of experiment designs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentDesign"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiment-designs/{id}": {
      "get": {
        "summary": "Get one experiment design entity",
        "description": "Returns a single experiment design entity\n",
        "operationId": "getExperiment-designById",
        "tags": [
          "Experiment Designs"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of experiment designs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentDesign"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Experiment Design Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments": {
      "get": {
        "summary": "get all experiment entities",
        "description": "This endpoint returns information about the experiments.\n",
        "operationId": "getExperiments",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags.category",
            "in": "query",
            "description": "Tag categories comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags.value",
            "in": "query",
            "description": "Tag values comma separated list",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of experiments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more experiment entities",
        "description": "Creates new experiment(s) in the Experiments System. The definition to use for the POST body is based upon the source query parameter as described below: <ul><li>template: <pre>{\n  \"id\": 0,\n  \"numberOfCopies\": 0\n}</pre><br/></li><li>experiment: <pre>{\n  \"ids\": [\n    0\n  ],\n  \"numberOfCopies\": 0\n}</pre><br/></li><li>undefined/not provided: <pre>[\n  {\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"experimentDesign\": \"string\",\n    \"status\": \"string\",\n    \"tags\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\",\n        \"experimentId\": 0\n      }\n    ],\n    \"owners\": [\n      \"string\"\n    ],\n    \"ownerGroups\": [\n      \"string\"\n    ],\n    \"request\": {\n      \"id\": \"string\",\n      \"type\": \"string\"\n    }\n  }\n]</pre></li></ul>",
        "operationId": "postExperiments",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Experiment Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}": {
      "get": {
        "summary": "get one experiment entity",
        "description": "The Experiments endpoint returns information about the experiment entities in Experiments System.\n",
        "operationId": "getExperimentById",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one experiment entity",
        "description": "update experiment entity in Experiments System.\n",
        "operationId": "putExperimentById",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/advanced-parameters": {
      "get": {
        "summary": "gets a list of all advanced parameters for a experiment",
        "description": "This endpoint returns information about the advanced parameters associated with an Experiment",
        "operationId": "getAdvancedParametersByExperimentId",
        "tags": [
          "Advanced Parameters"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Advanced Parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdvancedParameters"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/capacity-request-sync": {
      "post": {
        "summary": "Synchronizes capacity request data with an experiment's data",
        "description": "Synchronizes specific fields from a request from the Capacity Request system with the data stored for an Experiment",
        "operationId": "capacityRequestSync",
        "tags": [
          "Capacity"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "Capacity Request Sync Values",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "locations": {
                  "type": "integer"
                },
                "reps": {
                  "type": "integer"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Sync Successful"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/composites/treatments": {
      "get": {
        "summary": "get all treatment details, including combination elements with factor and level information for an experiment",
        "description": "This endpoint returns information about the treatment and and combination elements entities associated with an Experiment",
        "operationId": "getComposites_TreatmentsByExperimentId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more treatments and combination elements entities",
        "description": "Creates/updates treatments and combination elements in Experiments System.\n Request json has add , delete and update sections for treatments. API does action on a section with values and empty sections are ignored. So if add and delete sections are empty and update has treatments then only update action will happen. Combination elements within treatments needs to be complete. New combination element without id will be added and combination element with id will be updated, any combination element not included within treatment will be deleted.",
        "operationId": "postComposites_treatments",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Treatments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Composite-Treatments operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/composites/group-experimental-units": {
      "get": {
        "summary": "get all Groups, Group Values, and Experimental Units for a given experiment id",
        "description": "This endpoint returns information about the group,groupValues and experimental Units entities associated with an Experiment",
        "operationId": "getComposites_Group-experimental-unitsByExperimentId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GroupsAndUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeGroupsAndUnitsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more Groups, Group Values, and Experimental Units entities",
        "description": "This Service would delete the existing groups groupValues and ExperimentalUnits for the experimentId and then recreates them based on request Payload",
        "operationId": "postComposites_Group-experimental-unitsByExperimentId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Groups And Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeGroupsAndUnitsPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "composite group-experimental-units operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/composites/unit-specification-details": {
      "post": {
        "summary": "Creates, updates and deletes UnitSpecificationDetail",
        "description": "Creates, updates and deletes UnitSpecificationDetail",
        "operationId": "post_compositesUnitSpecificationDetail",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "UnitSpecificationDetail",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeUnitSpecificationDetailPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UnitSpecificationDetail operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/composites/design-group-experimental-units": {
      "post": {
        "summary": "posts design specification details, groups, group values, and experimental units",
        "description": "This service will update the design specification details, groups and units",
        "operationId": "postComposites_Design-Group-experimental-unitsByExperimentId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Design Specifications, Groups, And Units",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompositeDesignSpecificationDetailGroupsAndUnitsPOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "composite design-group-experimental-units operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/experiments/{id}/dependent-variables": {
      "get": {
        "summary": "get all dependent variables for given experiment id.",
        "description": "This endpoint returns information about the dependent variable entities associated with one Experiment.\n",
        "operationId": "getDependentVariablesByExperimentId",
        "tags": [
          "Dependent Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dependent Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependentVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/design-specification-details/": {
      "get": {
        "summary": "Get all design specification details for an experiment",
        "description": "Returns all design specification details for an experiment\n",
        "operationId": "getDesign-specification-detailsByExperimentId",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for a given experiment id",
        "description": "This endpoint returns information about the experimental units entities associated with an Experiment",
        "operationId": "getExperimentalUnitsByExperimentId",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ExperimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "partially update experimental units",
        "description": "Allows for a set of experimental units to be partially updated. Currently only allows the update of the entryId field.",
        "operationId": "patchExperimental-units",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Experimental Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitPayloadForPATCH"
              }
            },
            "description": "Numeric Id of the Experimental Unit to patch"
          }
        ],
        "responses": {
          "200": {
            "description": "Experimental Unit Patch SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/experiments/{id}/factors": {
      "get": {
        "summary": "get all factors for given experiment id.",
        "description": "This endpoint returns information about the factor entities associated with one Experiment.\n",
        "operationId": "getFactorsByExperimentId",
        "tags": [
          "Factors"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Factors",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/permissions": {
      "get": {
        "summary": "get user permissions for the user for experiment id",
        "description": "This endpoint returns information about the user permissions om experiment",
        "operationId": "getPermissionsForUserByExperimentId",
        "tags": [
          "Permissions"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PermissionsResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/summary": {
      "get": {
        "summary": "get the experiment summary for given experiment id.",
        "description": "This endpoint returns summary information about the experiment, such as name, number of variables, etc.\n",
        "operationId": "getSummaryByExperimentId",
        "tags": [
          "Experiment Summary"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment Summary",
            "schema": {
              "$ref": "#/definitions/ExperimentSummary"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/treatments": {
      "get": {
        "summary": "get all treatments for a given experiment id",
        "description": "This endpoint returns information about the treatment entities associated with an Experiment",
        "operationId": "getTreatmentsByExperimentId",
        "tags": [
          "Treatments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Treatment"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/unit-specification-details/": {
      "get": {
        "summary": "Get all unit specification details for an experiment",
        "description": "Returns all unit specification details for an experiment\n",
        "operationId": "getUnit-specification-detailsByExperimentId",
        "tags": [
          "Unit Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/variables": {
      "get": {
        "summary": "get all variables for given experiment id.",
        "description": "This endpoint returns information about the variable entities associated with one Experiment.\n",
        "operationId": "getVariablesByExperimentId",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariablesResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Save variables",
        "description": "Adds or updates the variables belogning to the specified experiment.",
        "operationId": "postVariables",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Variables",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VariablesRequestPayload"
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factors/{id}": {
      "get": {
        "summary": "get one factor entity",
        "description": "The factors endpoint returns information about the factor entities in Experiments System.\n",
        "operationId": "getFactorsById",
        "tags": [
          "Factors"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "factor entity",
            "schema": {
              "$ref": "#/definitions/FactorResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Factor Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factors/{id}/factor-levels": {
      "get": {
        "summary": "get all factor levels for given factor id.",
        "description": "This endpoint returns information about the factor level entities associated with one Factor.\n",
        "operationId": "getFactor-levelsByFactorId",
        "tags": [
          "Factor Levels"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Factor Levels",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorLevelResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-levels/{id}": {
      "get": {
        "summary": "get one factor level entity",
        "description": "The factor-levels endpoint returns information about the factor level entity in Experiments System.\n",
        "operationId": "getFactor-levelById",
        "tags": [
          "Factor Levels"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "factor-level entity",
            "schema": {
              "$ref": "#/definitions/FactorLevelResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Factor Level Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-types": {
      "get": {
        "summary": "Get all factor types",
        "description": "Returns all factor types that can be used\n",
        "operationId": "getFactorTypes",
        "tags": [
          "Factor Types"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Array of factor types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-types/{id}": {
      "get": {
        "summary": "Get one factor type entity",
        "description": "Returns a single factor type entity\n",
        "operationId": "getFactorTypeById",
        "tags": [
          "Factor Types"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Factor Type Entity",
            "schema": {
              "$ref": "#/definitions/FactorType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Factor Type Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/getDoc/{fileName}": {
      "get": {
        "summary": "Gets a markdown of a documentation file",
        "description": "Returns markdown string of documentation",
        "operationId": "getDoc",
        "tags": [
          "Documentation"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Markdown of requested page"
          },
          "403": {
            "description": "Forbidden. Catch All From CloudFront"
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "summary": "Get one group entity",
        "description": "Returns a single group entity\n",
        "operationId": "getGroupById",
        "tags": [
          "Groups"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group Entity",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/groups/{id}/group-values": {
      "get": {
        "summary": "Get all group values for a particular group",
        "description": "Returns all group values for a single group\n",
        "operationId": "getGroupValuesByGroupId",
        "tags": [
          "Group Value"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group Values",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupValue"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/group-types": {
      "get": {
        "summary": "Get all group types",
        "description": "Returns all group types that can be used\n",
        "operationId": "getGroupTypes",
        "tags": [
          "Group Types"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Array of group types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/group-types/{id}": {
      "get": {
        "summary": "Get one group type entity",
        "description": "Returns a single group type entity\n",
        "operationId": "getGroupTypeById",
        "tags": [
          "Group Types"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Group Type Entity",
            "schema": {
              "$ref": "#/definitions/GroupType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Type Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/group-values/{id}": {
      "get": {
        "summary": "Get on group value entity",
        "description": "Returns a single group entity\n",
        "operationId": "getGroup-ValueById",
        "tags": [
          "Group Value"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group Value Entity",
            "schema": {
              "$ref": "#/definitions/GroupValue"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Value Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ref-data-source-types": {
      "get": {
        "summary": "Gets all Reference Data Source Types and all their defined Data Sources",
        "description": "Returns an array of reference data source types and their data sources",
        "operationId": "getRefDataSourceTypes",
        "tags": [
          "Ref Data Sources"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Reference Data Source Type Entities With Data Sources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RefDataSourceTypeWithSources"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ref-design-specifications": {
      "get": {
        "summary": "Gets all ref-design-specifications and all their defined Data Sources",
        "description": "Returns an array of reference data source types and their data sources",
        "operationId": "getRefDesignSpecifications",
        "tags": [
          "Ref Design Specifications"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Reference Design specifications",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RefDesignSpecifications"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ref-design-specifications/{id}": {
      "get": {
        "summary": "Gets one ref-design-specification entity",
        "description": "Returns ref-design-specification entity by id",
        "operationId": "getRefDesignSpecificationsById",
        "tags": [
          "Ref Design Specifications"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "All Reference Design specifications",
            "schema": {
              "$ref": "#/definitions/RefDesignSpecifications"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/set-entries": {
      "get": {
        "summary": "Gets all set entries for a set.",
        "description": "Retrieves all set entries that belong to the given set id.",
        "operationId": "getSetEntries",
        "tags": ["Set Entry"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "query",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Set Entry/Treatment/Rep Mapping",
            "schema": {
              "$ref": "#/definitions/SetEntryTreatmentRepInfo"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Set Entries Do Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Returns a mapping of Set Entry Ids to corresponding Treatment Id, Treatment Number and Rep Number",
        "description": "Returns the relationship betweten Set Entry Id and Treatment",
        "operationId": "retrieveSetEntryRelationships",
        "tags": [
          "Set Entry"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Set Entry Ids",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Set Entry/Treatment/Rep Mapping",
            "schema": {
              "$ref": "#/definitions/SetEntryTreatmentRepInfo"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sets/{setId}/reset": {
      "post": {
        "summary": "Resets a set back to its original state",
        "description": "Resets the set in a field packed experiment back to its original number of reps and units.",
        "operationId": "resetSet",
        "tags": ["Set Entry"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success with no content"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sets/{setId}/treatment-details": {
      "get": {
        "summary": "Gets all levels for each treatment in a set",
        "description": "Retrieves each treatment and their levels for a given set id",
        "operationId": "getTreatmentDetails",
        "tags": ["Set Entry"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping of treatment ids to level information",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TreatmentLevelDetails"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates": {
      "get": {
        "summary": "get all Template entities",
        "description": "This endpoint returns information about the Templates.\n",
        "operationId": "getTemplates",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags.category",
            "in": "query",
            "description": "Tag categories comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags.value",
            "in": "query",
            "description": "Tag values comma separated list",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of templates",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more template entities",
        "description": "Creates new template(s) in the Experiments System. The definition to use for the POST body is based upon the source query parameter as described below: <ul><li>experiment: <pre>{\n  \"id\": 0,\n  \"numberOfCopies\": 0\n}</pre><br /></li><li>template: <pre>{\n  \"ids\": [\n    0\n  ],\n  \"numberOfCopies\": 0\n}</pre><br /></li><li>undefined/not provided: <pre>[\n  {\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"experimentDesign\": \"string\",\n    \"status\": \"string\",\n    \"tags\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\",\n        \"experimentId\": 0\n      }\n    ],\n    \"owners\": [\n      \"string\"\n    ],\n    \"ownerGroups\": [\n      \"string\"\n    ]  }\n]</pre></li></ul>",
        "operationId": "postTemplates",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source",
            "type": "string",
            "in": "query"
          }
        ],
        "responses": {
          "201": {
            "description": "Template Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "get one Template entity",
        "description": "The templates endpoint returns information about the Template entities in templates System.\n",
        "operationId": "getTemplateById",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Template entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one Template entity",
        "description": "update Template entity in templates System.\n",
        "operationId": "putTemplateById",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Template",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/advanced-parameters": {
      "get": {
        "summary": "gets a list of all advanced parameters for a template",
        "description": "This endpoint returns information about the advanced parameters associated with a Template",
        "operationId": "getAdvancedParametersByTemplateId",
        "tags": [
          "Advanced Parameters"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Advanced Parameters",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/AdvancedParameters"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/composites/treatments": {
      "get": {
        "summary": "get all treatments and combination elements for a given Template id",
        "description": "This endpoint returns information about the treatment and and combination elements entities associated with a Template",
        "operationId": "getComposites_TreatmentsByTemplateId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more treatments and combination elements entities",
        "description": "Creates/updates treatments and combination elements in templates System.\n Request json has add , delete and update sections for treatments. API does action on a section with values and empty sections are ignored. So if add and delete sections are empty and update has treatments then only update action will happen. Combination elements within treatments needs to be complete. New combination element without id will be added and combination element with id will be updated, any combination element not included within treatment will be deleted.",
        "operationId": "postTemplateComposites_treatments",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Treatments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Composite-Treatments operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/composites/group-experimental-units": {
      "get": {
        "summary": "get all Groups, Group Values, and experimental Units for a given Template id",
        "description": "This endpoint returns information about the group,groupValues and experimental Units entities associated with a Template",
        "operationId": "getComposites_Group-experimental-unitsByTemplateId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GroupsAndUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeGroupsAndUnitsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more Groups, Group Values, and experimental Units entities",
        "description": "This Service would delete the existing groups groupValues and experimentalUnits for the TemplateId and then recreates them based on request Payload",
        "operationId": "postComposites_Group-experimental-unitsByTemplateId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Groups And Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeGroupsAndUnitsPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "composite group-experimental-units operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/composites/unit-specification-details": {
      "post": {
        "summary": "Creates, updates and deletes UnitSpecificationDetail",
        "description": "Creates, updates and deletes UnitSpecificationDetail",
        "operationId": "postTemplate_compositesUnitSpecificationDetail",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "UnitSpecificationDetail",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeUnitSpecificationDetailPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UnitSpecificationDetail operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/composites/design-group-experimental-units": {
      "post": {
        "summary": "posts design specification details, groups, group values, and experimental units",
        "description": "This service will update the design specification details, groups and units",
        "operationId": "postComposites_Design-Group-experimental-unitsByTemplateId",
        "tags": [
          "Composites"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Design Specifications, Groups, And Units",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompositeDesignSpecificationDetailGroupsAndUnitsPOST"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "composite design-group-experimental-units operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/templates/{id}/dependent-variables": {
      "get": {
        "summary": "get all dependent variables for given Template id.",
        "description": "This endpoint returns information about the dependent variable entities associated with one Template.\n",
        "operationId": "getDependentVariablesByTemplateId",
        "tags": [
          "Dependent Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dependent Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependentVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/design-specification-details/": {
      "get": {
        "summary": "Get all design specification details for a Template",
        "description": "Returns all design specification details for a Template\n",
        "operationId": "getDesign-specification-detailsByTemplateId",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for a given Template id",
        "description": "This endpoint returns information about the experimental units entities associated with a Template",
        "operationId": "getexperimentalUnitsByTemplateId",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "experimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/factors": {
      "get": {
        "summary": "get all factors for given Template id.",
        "description": "This endpoint returns information about the factor entities associated with one Template.\n",
        "operationId": "getFactorsByTemplateId",
        "tags": [
          "Factors"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Factors",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/permissions": {
      "get": {
        "summary": "get user permissions for the user for Template id",
        "description": "This endpoint returns information about the user permissions om Template",
        "operationId": "getPermissionsForUserByTemplateId",
        "tags": [
          "Permissions"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PermissionsResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/summary": {
      "get": {
        "summary": "get the Template summary for given Template id.",
        "description": "This endpoint returns summary information about the Template, such as name, number of variables, etc.\n",
        "operationId": "getSummaryByTemplateId",
        "tags": [
          "Template Summary"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Template Summary",
            "schema": {
              "$ref": "#/definitions/ExperimentSummary"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/treatments": {
      "get": {
        "summary": "get all treatments for a given Template id",
        "description": "This endpoint returns information about the treatment entities associated with a Template",
        "operationId": "getTreatmentsByTemplateId",
        "tags": [
          "Treatments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Treatment"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/unit-specification-details/": {
      "get": {
        "summary": "Get all unit specification details for a Template",
        "description": "Returns all unit specification details for a Template\n",
        "operationId": "getUnit-specification-detailsByTemplateId",
        "tags": [
          "Unit Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/variables": {
      "get": {
        "summary": "get all variables for given Template id.",
        "description": "This endpoint returns information about the variable entities associated with one Template.\n",
        "operationId": "getVariablesByTemplateId",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariablesResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Save variables",
        "description": "Adds or updates the variables belogning to the specified template.",
        "operationId": "templatePostVariables",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Variables",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VariablesRequestPayload"
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments/{id}": {
      "get": {
        "summary": "Get one treatment entity",
        "description": "Gets a treatment entity for the given treatment id",
        "operationId": "getTreatmentById",
        "tags": [
          "Treatments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Treatment Entity",
            "schema": {
              "$ref": "#/definitions/Treatment"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Treatment Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments/{id}/combination-elements": {
      "get": {
        "summary": "get all combination elements for given treatment id.",
        "description": "This endpoint returns information about the combination-elements entities associated with one treatment.\n",
        "operationId": "getCombination-elementsByTreatmentId",
        "tags": [
          "Combination Elements"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CombinationElements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinationElementResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Treatment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for given treatment id.",
        "description": "This endpoint returns information about the experimental units entities associated with one treatment.\n",
        "operationId": "getExperimentalUnitsByTreatmentId",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ExperimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Treatment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-specifications/": {
      "get": {
        "summary": "Get all unit specification entities",
        "description": "Returns all unit specifications\n",
        "operationId": "getUnitSpecifications",
        "tags": [
          "Unit Specification"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecification"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-specifications/{id}": {
      "get": {
        "summary": "Get a unit specification entity",
        "description": "Returns a unit specification\n",
        "operationId": "getUnitSpecificationById",
        "tags": [
          "Unit Specification"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Entity",
            "schema": {
              "$ref": "#/definitions/UnitSpecification"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unit Specification Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-specification-details/{id}": {
      "get": {
        "summary": "Get a unit specification detail entity",
        "description": "Returns a unit specification detail\n",
        "operationId": "getUnitSpecificationDetailById",
        "tags": [
          "Unit Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entity",
            "schema": {
              "$ref": "#/definitions/UnitSpecificationDetail"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unit Specification Detail Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-types/": {
      "get": {
        "summary": "Get all unit type entities",
        "description": "Returns all unit types\n",
        "operationId": "getUnitTypes",
        "tags": [
          "Unit Type"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unit Type Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitType"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-types/{id}": {
      "get": {
        "summary": "Get a unit type entity",
        "description": "Returns a unit type\n",
        "operationId": "getUnitTypeById",
        "tags": [
          "Unit Type"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Type Entity",
            "schema": {
              "$ref": "#/definitions/UnitType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unit Type Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AdvancedParameters": {
      "type": "object",
      "properties": {
        "minRep": {
          "type": "integer",
          "description": "the minimum number of reps allowed for the experiment"
        },
        "repRangeMin": {
          "type": "integer",
          "description": "the minimum number of units/entries allowed in a rep"
        },
        "repRangeMax": {
          "type": "integer",
          "description": "the maximum number of units/entries allowed in a rep"
        }
      }
    },
    "CombinationElementResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "factorLevelId": {
          "type": "integer",
          "description": "factorLevelId"
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "CompositeGroupsAndUnitsPOST": {
      "type": "object",
      "properties": {
        "refRandomizationStrategyId": {
          "type": "integer",
          "description": "reference to RandomizationStrategy Table"
        },
        "refGroupTypeId": {
          "type": "integer",
          "description": "reference to GroupType Table"
        },
        "groupValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupValueCompositeOperation"
          }
        },
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentalUnitCompositeOperation"
          }
        },
        "setId": {
          "type": "integer",
          "description": "The set id for the group"
        },
        "childGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeGroupsAndUnitsPOST"
          }
        }
      }
    },
    "CompositeGroupsAndUnitsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for group entity"
        },
        "parentId": {
          "type": "integer",
          "description": "reference to parent Group"
        },
        "refRandomizationStrategyId": {
          "type": "integer",
          "description": "reference to RandomizationStrategy Table"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experimentId entity"
        },
        "groupValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupValueResponseWithoutAuditKeys"
          }
        },
        "setId": {
          "type": "integer",
          "description": "The set id for the group"
        },
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentalUnitResponseWithoutAuditKeys"
          }
        }
      }
    },
    "CompositeTreatmentsCombinationElement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of combination element if updating existing else empty."
        },
        "factorLevelId": {
          "type": "integer",
          "description": "Factor level ID"
        }
      }
    },
    "CompositeTreatmentsPayloadAdd": {
      "type": "object",
      "properties": {
        "isControl": {
          "type": "string",
          "description": "boolean value isControl to mark treatment as control."
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsCombinationElement"
          }
        }
      }
    },
    "CompositeTreatmentsPayloadForPOST": {
      "type": "object",
      "properties": {
        "adds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsPayloadAdd"
          }
        },
        "deletes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ids"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsPayloadUpdate"
          }
        }
      }
    },
    "CompositeTreatmentsPayloadUpdate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of treatment id to update."
        },
        "isControl": {
          "type": "string",
          "description": "boolean value isControl to mark treatment as control."
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsCombinationElement"
          }
        }
      }
    },
    "CompositeTreatmentsCombinationElementGET": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for combination element"
        },
        "factorId": {
          "type": "integer",
          "description": "Id of the factor this combination element refers to"
        },
        "factorName": {
          "type": "string",
          "description": "Name of the factor this combination element refers to"
        },
        "factorLevel": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the factor level"
            },
            "value": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "description": "value of the factor level"
            }
          }
        }
      }
    },
    "CompositeTreatmentsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "isControl": {
          "type": "boolean",
          "description": "isControl boolean value to mark a treatment as control"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment - optional field."
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experimentId entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsCombinationElementGET"
          }
        }
      }
    },
    "CompositeDesignSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "adds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DesignSpecificationDetailPayloadForPOST"
          }
        },
        "deletes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ids"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DesignSpecificationDetailPayloadForPUT"
          }
        }
      }
    },
    "CompositeDesignSpecificationDetailGroupsAndUnitsPOST": {
      "type": "object",
      "properties": {
        "groupAndUnitDetails": {
          "$ref": "#/definitions/CompositeGroupsAndUnitsPOST"
        },
        "designSpecifications": {
          "$ref": "#/definitions/CompositeDesignSpecificationDetailPayloadForPOST"
        }
      }
    },
    "CompositeUnitSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "adds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitSpecificationDetailPayloadForPOST"
          }
        },
        "deletes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ids"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitSpecificationDetailPayloadForPUT"
          }
        }
      }
    },
    "CreateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "http status code, 201 for success and 4.x.x for errors."
        },
        "message": {
          "type": "string",
          "description": "Resource created or error description in case of error."
        },
        "id": {
          "type": "integer",
          "description": "id of newly created resource or black in case of error."
        }
      }
    },
    "DependentVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "required": {
          "type": "boolean",
          "description": "required or optional boolean value"
        },
        "questionCode": {
          "type": "string",
          "description": "refers to Q&A application , its an optional field"
        }
      }
    },
    "DependentVariableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "required": {
          "type": "boolean",
          "description": "boolean value to specify dependent variable is required or not."
        },
        "name": {
          "type": "string",
          "description": "name of dependent variable."
        },
        "experimentId": {
          "type": "integer",
          "description": "ExperimentId of experiment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "questionCode": {
          "type": "string",
          "description": "Refers to Q&A question Code"
        }
      }
    },
    "DesignSpecificationDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Design Spec Id"
        },
        "value": {
          "type": "string",
          "description": "Value of the design specification detail"
        },
        "refDesignSpecId": {
          "type": "integer",
          "description": "Reference to Design Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "DesignSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the design specification detail"
        },
        "refDesignSpecId": {
          "type": "integer",
          "description": "Reference to Design Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        }
      }
    },
    "DesignSpecificationDetailPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the Design Specification Detail to update"
        },
        "value": {
          "type": "string",
          "description": "Value of the design specification detail"
        },
        "refDesignSpecId": {
          "type": "integer",
          "description": "Reference to Design Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ExperimentalUnitCompositeOperation": {
      "type": "object",
      "properties": {
        "treatmentId": {
          "type": "integer",
          "description": "id of treatmentId entity."
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit."
        }
      }
    },
    "ExperimentalUnitPayloadForPATCH": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of experimental unit to update."
        },
        "setEntryId": {
          "type": "integer",
          "description": "set entry id for experimental unit."
        }
      }
    },
    "ExperimentalUnitResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit"
        },
        "setEntryId": {
          "type": "integer",
          "description": "the set entry id for the experimental unit"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "ExperimentalUnitResponseWithoutAuditKeys": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit"
        },
        "setEntryId": {
          "type": "integer",
          "description": "the set entry id for the experimental unit"
        }
      }
    },
    "ExperimentDesign": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id for experiment design entity"
        },
        "name": {
          "type": "string",
          "description": "name of experiment design"
        }
      }
    },
    "ExperimentPayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the experiment entity."
        },
        "description": {
          "type": "string",
          "description": "Description of the Experiment."
        },
        "experimentDesign": {
          "type": "string",
          "description": "ExperimentDesign Type."
        },
        "status": {
          "type": "string",
          "description": "status of the experiment entity."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagPayloadForPOST"
          }
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownerGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request": {
          "type": "object",
          "description": "The identifiers for the Capacity Request to associate with the experiment. This element is optional.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the capacity request"
            },
            "type": {
              "type": "string",
              "description": "The type of capacity request('field' or 'ce')"
            }
          },
          "required": [
            "id",
            "type"
          ]
        }
      }
    },
    "ExperimentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for experiment entity"
        },
        "name": {
          "type": "string",
          "description": "name of the experiment entity."
        },
        "description": {
          "type": "string",
          "description": "description of the Experiment."
        },
        "ExperimentDesign": {
          "type": "string",
          "description": "Experiment Design Type"
        },
        "status": {
          "type": "string",
          "description": "status of the experiment entity."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tags"
          }
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownerGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "ExperimentSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of the experiment."
        },
        "name": {
          "type": "string",
          "description": "name of the experiment."
        },
        "numberOfVariables": {
          "type": "integer",
          "description": "the number of variables associated with the experiment."
        },
        "numberOfTreatments": {
          "type": "integer",
          "description": "the number of treatments associated with the experiment."
        },
        "numberOfExperimentalUnits": {
          "type": "integer",
          "description": "the number of experimental units associated with the experiment."
        },
        "numberOfUnitSpecs": {
          "type": "integer",
          "description": "the number of unit specs associated with the experiment."
        },
        "nameOfUnitType": {
          "type": "string",
          "description": "Name of experimental unit associated with the experiment."
        },
        "numberOfIndependentVariables": {
          "type": "integer",
          "description": "the number of independent variables associated with the experiment."
        },
        "numberOfDependentVariables": {
          "type": "integer",
          "description": "the number of dependent variables associated with the experiment."
        }
      }
    },
    "FactorLevelResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "value": {
          "type": "string",
          "description": "value of the factor level."
        },
        "factorId": {
          "type": "integer",
          "description": "id of Factor entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "FactorResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "name": {
          "type": "string",
          "description": "name of the factor."
        },
        "refFactorTypeId": {
          "type": "integer",
          "description": "id of FactorType entity"
        },
        "refDataSourceId": {
          "type": "integer",
          "description": "id of the dataSource entity"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "tier": {
          "type": "integer",
          "description": "tier is used categorize factors in to main/sub/sub-sub etc plots (valid Range : 1 to 10)"
        }
      }
    },
    "FactorType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id for factor type"
        },
        "type": {
          "type": "string",
          "description": "name of the factor type"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Group Id"
        },
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id"
        },
        "parentId ": {
          "type": "integer",
          "description": "parent group id of the group (optional)"
        },
        "refRandomizationStrategyId": {
          "type": "integer",
          "description": "Id of RandomizationStrategy "
        },
        "refGroupTypeId": {
          "type": "integer",
          "description": "Id of GroupType"
        },
        "setId": {
          "type": "integer",
          "description": "The set id for the group"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "GroupPayloadForPATCH": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of group to update."
        },
        "setId": {
          "type": "integer",
          "description": "set id for the group."
        }
      }
    },
    "GroupType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id for group type"
        },
        "type": {
          "type": "string",
          "description": "name of the group type"
        }
      }
    },
    "GroupValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Group Value Id"
        },
        "factorLevelId":{
          "type": "integer",
          "description": "Factor Level Id"
        },
        "factorLevelValue":{
          "type": "object",
          "description": "The value of the factor level"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "value": {
          "type": "string",
          "description": "Value of the entity associated to the group"
        },
        "groupId": {
          "type": "integer",
          "description": "Group Id"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "GroupValueResponseWithoutAuditKeys": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Group Value Id"
        },
        "factorLevelId":{
          "type": "integer",
          "description": "Factor Level Id"
        },
        "factorLevelValue":{
          "type": "object",
          "description": "The value of the factor level"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "value": {
          "type": "string",
          "description": "Value of the entity associated to the group"
        },
        "groupId": {
          "type": "integer",
          "description": "Group Id"
        }
      }
    },
    "GroupValueCompositeOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "value": {
          "type": "string",
          "description": "Value of the entity associated to the group"
        },
        "factorLevelId": {
          "type": "integer",
          "description": "Factor Level this entity is associated with"
        }
      }
    },
    "ids": {
      "type": "integer"
    },
    "Levels": {
      "type": "string"
    },
    "PermissionsResponse": {
      "type": "string"
    },
    "RefDataSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id of the data source"
        },
        "name": {
          "type": "string",
          "description": "name of the data source"
        },
        "refId": {
          "type": "string",
          "description": "optional reference Id for the data source"
        },
        "refDataSourceTypeId": {
          "type": "integer"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "RefDataSourceTypeWithSources": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of the data source type"
        },
        "type": {
          "type": "string",
          "description": "name of the data source type"
        },
        "refDataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RefDataSource"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "RefDesignSpecifications": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id of ref design spec"
        },
        "name": {
          "type": "string",
          "description": "name of ref design spec"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "SetEntryTreatmentRepInfo": {
      "type": "object",
      "properties": {
        "setEntryId": {
          "type": "object",
          "properties": {
            "treatmentId": {
              "type": "integer",
              "description": "Treatment Id that the specific set entry maps to"
            },
            "treatmentNumber": {
              "type": "integer",
              "description": "Treatment Number that the specific set entry maps to"
            },
            "rep": {
              "type": "integer",
              "description": "Rep number that the specific set entry maps to"
            }
          }
        }
      }
    },
    "Treatment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Treatment Id"
        },
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id of the treatment"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "Number of the treatment"
        },
        "isControl": {
          "type": "boolean",
          "description": "Specifies if treatment is a control treatment"
        },
        "notes": {
          "type": "string",
          "description": "Used to specify treatment information"
        }
      }
    },
    "LevelItem": {
      "type": "object",
      "properties": {
        "propertyTypeId": {
          "type": "integer",
          "description": "DEPRECATED: This will be removed in a future version.  Indicates what type of property this item is."
        },
        "objectType": {
          "type": "string",
          "description": "Indicates the type of item object.  This may be one of: 'Catalog', 'Other', or 'Composite'"
        },
        "label": {
          "type": "string",
          "description": "The name of the property.  In the case of simple factors, this will be the same as the name of the factor.  In the case of complex factors, this will be the name of the property."
        },
        "text": {
          "type": "string",
          "description": "In the case of a simple factor, this is the plain-text value.  In the case of a property type of catalog, this is the plain-text value specified when a catalog item could not be found."
        },
        "refId": {
          "type": "string",
          "description": "Used in the case when the property type is catalog.  This is the ID of the referenced item in the catalog."
        },
        "catalogType": {
          "type": "string",
          "description": "Indicates the which source the catalog is referencing.  Catalog sources may be found here: https://inventory-api.velocity-np.ag/types/"
        }
      }
    },
    "ClusterResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the factor level."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LevelItem"
          }
        },
        "objectType": {
          "type": "string",
          "description": "Indicates the type of item object.  This value will be 'Cluster' for this object."
        }
      }
    },
    "ClusterRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the factor level."
        },
        "_refId": {
          "type": "integer",
          "description": "Reference ID for the level.  This may be references by an independent variable association."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LevelItem"
          }
        },
        "objectType": {
          "type": "string",
          "description": "Indicates the type of item object.  This value will be 'Cluster' for this object."
        }
      }
    },
    "Variable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Levels"
          }
        }
      }
    },
    "IndependentVariableRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the factor"
        },
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterRequest"
          }
        },
        "tier": {
          "type": "integer",
          "description": "the tier of the split that the variable is part of"
        }
      }
    },
    "IndependentVariableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the factor"
        },
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "associatedFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssociatedFactor"
          }
        },
        "nestedFactors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NestedFactor"
          }
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterResponse"
          }
        },
        "tier": {
          "type": "integer",
          "description": "the tier of the split that the variable is part of"
        }
      }
    },
    "AssociatedFactor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the associated factor."
        },
        "name": {
          "type": "string",
          "description": "Name of the associated factor."
        }
      }
    },
    "NestedFactor": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the nested factor."
        },
        "name": {
          "type": "string",
          "description": "Name of the nested factor."
        }
      }
    },
    "IndependentAssociationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the association"
        },
        "associatedLevelId": {
          "type": "integer",
          "description": "Id of the factor level on the associated side of relationship"
        },
        "nestedLevelId": {
          "type": "integer",
          "description": "Id of the factor level on the nested side of relationship"
        }
      }
    },
    "IndependentAssociationRequest": {
      "type": "object",
      "properties": {
        "associatedLevelRefId": {
          "type": "integer",
          "description": "RefId of the factor level on the associated side of relationship.  This should reference a _refId defined on a level"
        },
        "nestedLevelRefId": {
          "type": "integer",
          "description": "RefId of the factor level on the nested side of relationship.  This should reference a _refId defined on a level"
        }
      }
    },
    "VariablesRequestPayload": {
      "type": "object",
      "properties": {
        "independent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndependentVariableRequest"
          }
        },
        "exogenous": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "dependent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentVariable"
          }
        },
        "independentAssociations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndependentAssociationRequest"
          }
        }
      }
    },
    "VariablesResponse": {
      "type": "object",
      "properties": {
        "independent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndependentVariableResponse"
          }
        },
        "exogenous": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "dependent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentVariable"
          }
        },
        "independentAssociations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndependentAssociationResponse"
          }
        }
      }
    },
    "UnitSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "uomType": {
          "type": "string",
          "description": "Type of the unit of measure this specification uses"
        },
        "refUnitTypeId": {
          "type": "integer",
          "description": "Reference to Unit Type"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "UnitSpecificationDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomId": {
          "type": "integer",
          "description": "Id of the Unit of Measure reference"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "UnitSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomId": {
          "type": "integer",
          "description": "Reference to Unit of Measure"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        }
      }
    },
    "UnitSpecificationDetailPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the Unit Specification Detail to update"
        },
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomId": {
          "type": "integer",
          "description": "Reference to Unit of Measure"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        }
      }
    },
    "UnitType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "TagPayloadForPOST": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "category of the tag."
        },
        "value": {
          "type": "string",
          "description": "value of the tag."
        }
      }
    },
    "Tags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Tag Id"
        },
        "category": {
          "type": "string",
          "description": "Category of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "experimentId": {
          "type": "string",
          "description": "tag associated to experiment "
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "TreatmentLevelDetails": {
      "type": "object",
      "properties": {
        "treatmentId": {
          "type": "integer"
        },
        "factorLevels": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "factorName": {
                "type": "integer"
              },
              "items": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  }
}