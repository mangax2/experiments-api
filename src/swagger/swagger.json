{
    "swagger": "2.0",
    "info": {
        "title": "Experiments API",
        "description": "Experiment APIs to create experiment model, requires oauth_resourceownerinfo http header",
        "version": "v1"
    },
    "host": "api01-np.agro.services",
    "schemes": [
        "https"
    ],
    "basePath": "/experiments-api",
    "produces": [
        "application/json"
    ],
    "paths": {
        "/experiment-designs": {
            "get": {
                "summary": "Get all experiment designs",
                "description": "Returns all experiment designs that can be used\n",
                "tags": [
                    "Experiment Designs"
                ],
                "responses": {
                    "200": {
                        "description": "Array of experiment designs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentDesign"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Adds a new experiment design",
                "description": "Posts a new experiment design",
                "tags": [
                    "Experiment Designs"
                ],
                "parameters": [
                    {
                        "name": "experimentDesign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExperimentDesignPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of newly created experiment design",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Invalid body",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiment-designs/{id}": {
            "get": {
                "summary": "Get one experiment design entity",
                "description": "Returns a single experiment design entity\n",
                "tags": [
                    "Experiment Designs"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of experiment designs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentDesign"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Experiment Design Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update one experiment design",
                "description": "Updates a single experiment design entity\n",
                "tags": [
                    "Experiment Designs"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "experimentDesign",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExperimentDesignPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Experiment Design entity",
                        "schema": {
                            "$ref": "#/definitions/ExperimentDesign"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Experiment Design Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes one experiment design",
                "description": "Deletes a single experiment design entity\n",
                "tags": [
                    "Experiment Designs"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted Experiment Design entity",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Experiment Design Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments": {
            "get": {
                "summary": "get all experiment entities",
                "description": "This endpoint returns information about the experiments.\n",
                "tags": [
                    "Experiments"
                ],
                "responses": {
                    "200": {
                        "description": "An array of experiments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "post one or more experiment entities",
                "description": "Creates new experiments in Experiments System.\n",
                "tags": [
                    "Experiments"
                ],
                "parameters": [
                    {
                        "name": "experiment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentPayload"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Experiment Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}": {
            "get": {
                "summary": "get one experiment entity",
                "description": "The Experiments endpoint returns information about the experiment entities in Experiments System.\n",
                "tags": [
                    "Experiments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Experiment entity",
                        "schema": {
                            "$ref": "#/definitions/ExperimentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one experiment entity",
                "description": "update experiment entity in Experiments System.\n",
                "tags": [
                    "Experiments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "experiment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ExperimentPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Experiment entity",
                        "schema": {
                            "$ref": "#/definitions/ExperimentResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one experiment entity",
                "description": "delete experiment entity in Experiments System.\n",
                "tags": [
                    "Experiments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Experiment Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/hypotheses": {
            "get": {
                "summary": "get all hypotheses for given experiment id.",
                "description": "This endpoint returns information about the hypotheses entities associated with one Experiment.\n",
                "tags": [
                    "Hypotheses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hypotheses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HypothesisResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/dependent-variables": {
            "get": {
                "summary": "get all dependent variables for given experiment id.",
                "description": "This endpoint returns information about the dependent variable entities associated with one Experiment.\n",
                "tags": [
                    "Dependent Variables"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dependent Variables",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DependentVariableResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/factors": {
            "get": {
                "summary": "get all factors  for given experiment id.",
                "description": "This endpoint returns information about the factor entities associated with one Experiment.\n",
                "tags": [
                    "Factors"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Factors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/variables": {
            "get": {
                "summary": "get all variables for given experiment id.",
                "description": "This endpoint returns information about the variable entities associated with one Experiment.\n",
                "tags": [
                    "Variables"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Variables",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/VariablesResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/treatments": {
            "get": {
                "summary": "get all treatments for a given experiment id",
                "description": "This endpoint returns information about the treatment entities associated with an Experiment",
                "tags": [
                    "Treatments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Treatments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Treatment"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/experimental-units": {
            "get": {
                "summary": "get all experimental units for a given experiment id",
                "description": "This endpoint returns information about the experimental units entities associated with an Experiment",
                "tags": [
                    "Experimental Units"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExperimentalUnits",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentalUnitResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experiments/{id}/composites/treatments": {
            "get": {
                "summary": "get all treatments and combination elements for a given experiment id",
                "description": "This endpoint returns information about the treatment and and combination elements entities associated with an Experiment",
                "tags": [
                    "Composites"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Treatments",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CompositeTreatmentsResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hypotheses": {
            "get": {
                "summary": "get all hypotheses entities",
                "description": "This endpoint returns information about the hypotheses.\n",
                "tags": [
                    "Hypotheses"
                ],
                "responses": {
                    "200": {
                        "description": "An array of hypotheses",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HypothesisResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "post one or more experiment entities",
                "description": "Creates new hypotheses in Experiments System.\n",
                "tags": [
                    "Hypotheses"
                ],
                "parameters": [
                    {
                        "name": "hypotheses",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HypothesisPayload"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "hypotheses Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/hypotheses/{id}": {
            "get": {
                "summary": "get one hypothesis entity",
                "description": "The hypotheses endpoint returns information about the hypothesis entities in Experiments System.\n",
                "tags": [
                    "Hypotheses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hypotheses entity",
                        "schema": {
                            "$ref": "#/definitions/HypothesisResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Hypothesis Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one hypothesis entity",
                "description": "update Hypothesis entity in Experiments System.\n",
                "tags": [
                    "Hypotheses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "hypothesis",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HypothesisPayload"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Hypothesis entity",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HypothesisResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Hypothesis Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one hypothesis entity",
                "description": "delete hypothesis entity in Experiments System.\n",
                "tags": [
                    "Hypotheses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "hypothesis Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Hypothesis Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dependent-variables/{id}": {
            "get": {
                "summary": "get one dependent variable entity",
                "description": "The dependent variables endpoint returns information about the dependent variable entities in Experiments System.\n",
                "tags": [
                    "Dependent Variables"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "dependent Variable entity",
                        "schema": {
                            "$ref": "#/definitions/DependentVariableResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Dependent Variable Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one Dependent Variable entity",
                "description": "delete Dependent Variable entity in Experiments System.\n",
                "tags": [
                    "Dependent Variables"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Dependent Variable Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Dependent Variable Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/dependent-variables": {
            "post": {
                "summary": "post one or more dependent variable entities",
                "description": "Creates new Dependent Variables in Experiments System.\n",
                "tags": [
                    "Dependent Variables"
                ],
                "parameters": [
                    {
                        "name": "DependentVariables ",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DependentVariablePayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Dependent Variable Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one or more dependent variable entities",
                "description": "Update Dependent Variables in Experiments System.\n",
                "tags": [
                    "Dependent Variables"
                ],
                "parameters": [
                    {
                        "name": "DependentVariables",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/DependentVariablePayloadForPUT"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factors/{id}": {
            "get": {
                "summary": "get one factor entity",
                "description": "The factors endpoint returns information about the factor entities in Experiments System.\n",
                "tags": [
                    "Factors"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "factor entity",
                        "schema": {
                            "$ref": "#/definitions/FactorResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Factor Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one factor entity",
                "description": "delete factor entity in Experiments System.\n",
                "tags": [
                    "Factors"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Factor Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Factor Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factors/{id}/factor-levels": {
            "get": {
                "summary": "get all factors  for given factor id.",
                "description": "This endpoint returns information about the factor entities associated with one Factor.\n",
                "tags": [
                    "Factor Levels"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Factors",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experiment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factors": {
            "post": {
                "summary": "post one or more factor entities",
                "description": "Creates new factor entity in Experiments System.\n",
                "tags": [
                    "Factors"
                ],
                "parameters": [
                    {
                        "name": "Factors ",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorPayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Factor Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one or more factor entities",
                "description": "Update factor in Experiments System.\n",
                "tags": [
                    "Factors"
                ],
                "parameters": [
                    {
                        "name": "Factors",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorPayloadForPUT"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factor-levels/{id}": {
            "get": {
                "summary": "get one factor level entity",
                "description": "The factor-levels endpoint returns information about the factor level entity in Experiments System.\n",
                "tags": [
                    "Factor Levels"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "factor-level entity",
                        "schema": {
                            "$ref": "#/definitions/FactorLevelResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Factor Level Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one factor level entity",
                "description": "delete factor level entity in Experiments System.\n",
                "tags": [
                    "Factor Levels"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Factor Level Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Factor Level Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factor-levels": {
            "post": {
                "summary": "post one or more factor level entities",
                "description": "Creates new factor level entities in Experiments System.\n",
                "tags": [
                    "Factor Levels"
                ],
                "parameters": [
                    {
                        "name": "Factor Levels ",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorLevelPayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Factor Level Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one or more factor level entities",
                "description": "Update factor level in Experiments System.\n",
                "tags": [
                    "Factor Levels"
                ],
                "parameters": [
                    {
                        "name": "Factor Levels",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorLevelPayloadForPUT"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factor-types": {
            "get": {
                "summary": "Get all factor types",
                "description": "Returns all factor types that can be used\n",
                "tags": [
                    "Factor Types"
                ],
                "responses": {
                    "200": {
                        "description": "Array of factor types",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FactorType"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "post": {
                "summary": "Adds a new factor type",
                "description": "Creates a new factor type",
                "tags": [
                    "Factor Types"
                ],
                "parameters": [
                    {
                        "name": "factorType",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/FactorTypePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ID of newly created factor type",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Invalid body",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/factor-types/{id}": {
            "get": {
                "summary": "Get one factor type entity",
                "description": "Returns a single factor type entity\n",
                "tags": [
                    "Factor Types"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Single Factor Type Entity",
                        "schema": {
                            "$ref": "#/definitions/FactorType"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Factor Type Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Update one factor type",
                "description": "Updates a single factor type entity\n",
                "tags": [
                    "Factor Types"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    },
                    {
                        "name": "factorType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/FactorTypePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated Factor Type entity",
                        "schema": {
                            "$ref": "#/definitions/FactorType"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Factor Type Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "Deletes one factor type",
                "description": "Deletes a single factor type entity\n",
                "tags": [
                    "Factor Types"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted Experimental Design entity",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Factor Type Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/variables": {
            "post": {
                "summary": "Add variables",
                "description": "Creates a new variables, clears existing variables when new variables are provided",
                "tags": [
                    "Variables"
                ],
                "parameters": [
                    {
                        "name": "Variables",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/VariablesRquestPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid body",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/treatments": {
            "post": {
                "summary": "Add treatments",
                "description": "Creates new treatments",
                "tags": [
                    "Treatments"
                ],
                "parameters": [
                    {
                        "name": "Treatments",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TreatmentsRequestPayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid body",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "Updates treatments",
                "description": "Updates existing treatments",
                "tags": [
                    "Treatments"
                ],
                "parameters": [
                    {
                        "name": "Treatments",
                        "in": "body",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TreatmentsRequestPayloadForPUT"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid body",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/treatments/{id}": {
            "get": {
                "summary": "Get one treatment entity",
                "description": "Gets a treatment entity for the given treatment id",
                "tags": [
                    "Treatments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Single Treatment Entity",
                        "schema": {
                            "$ref": "#/definitions/Treatment"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Treatment Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one treatment entity",
                "description": "Deletes a treatment entity for the given treatment id",
                "tags": [
                    "Treatments"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "type": "string",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted Treatment Entity",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Invalid Request",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "Treatment Does Not Exist",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/treatments/{id}/combination-elements": {
            "get": {
                "summary": "get all combination elements  for given treatment id.",
                "description": "This endpoint returns information about the combination-elements entities associated with one treatment.\n",
                "tags": [
                    "Combination Elements"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CombinationElements",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CombinationElementResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Treatment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/treatments/{id}/experimental-units": {
            "get": {
                "summary": "get all experimental units for given treatment id.",
                "description": "This endpoint returns information about the experimental units entities associated with one treatment.\n",
                "tags": [
                    "Experimental Units"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ExperimentalUnits",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentalUnitResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Treatment Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/combination-elements/{id}": {
            "get": {
                "summary": "get one combination-element entity",
                "description": "The combination-elements endpoint returns information about the combination elements entity in Experiments System.\n",
                "tags": [
                    "Combination Elements"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "combination-element entity",
                        "schema": {
                            "$ref": "#/definitions/CombinationElementResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Combination Element Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one combination element Response entity",
                "description": "delete combination element entity in Experiments System.\n",
                "tags": [
                    "Combination Elements"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Combination Element Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Combination Element Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/combination-elements": {
            "post": {
                "summary": "post one or more combination element entities",
                "description": "Creates new combination element entities in Experiments System.\n",
                "tags": [
                    "Combination Elements"
                ],
                "parameters": [
                    {
                        "name": "Combination Elements",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CombinationElementPayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Combination Element Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one or more combination element entities",
                "description": "Update combination element in Experiments System.\n",
                "tags": [
                    "Combination Elements"
                ],
                "parameters": [
                    {
                        "name": "Combination Elements",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CombinationElementPayloadForPUT"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experimental-units/{id}": {
            "get": {
                "summary": "get one experimental unit entity",
                "description": "The experimental-units endpoint returns information about the experimental unit entity in Experiments System.\n",
                "tags": [
                    "Experimental Units"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "integer",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Experimental Unit entity",
                        "schema": {
                            "$ref": "#/definitions/ExperimentalUnitResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experimental Unit Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "delete": {
                "summary": "delete one experimental unit entity",
                "description": "delete experimental unit entity in Experiments System.\n",
                "tags": [
                    "Experimental Units"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "type": "string",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Experimental Unit Deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "404": {
                        "description": "No Experimental Unit Found For ID",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/experimental-units": {
            "post": {
                "summary": "post one or more experimental unit entities",
                "description": "Creates new experimental unit entities in Experiments System.\n",
                "tags": [
                    "Experimental Units"
                ],
                "parameters": [
                    {
                        "name": "Experimental Units",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentalUnitPayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Experimental Unit Created",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CreateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            },
            "put": {
                "summary": "put one or more Experimental Unit entities",
                "description": "Update Experimental Unit in Experiments System.\n",
                "tags": [
                    "Experimental Units"
                ],
                "parameters": [
                    {
                        "name": "Experimental Units",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExperimentalUnitPayloadForPUT"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/UpdateResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/composites/treatments": {
            "post": {
                "summary": "post one or more treatments and combination elements entities",
                "description": "Creates/updates treatments and combination elements in Experiments System.\n Request json has add , delete and update sections for treatments. API does action on a section with values and empty sections are ignored. So if add and delete sections are empty and update has treatments then only update action will happen. Combination elements within treatments needs to be complete. New combination element without id will be added and combination element with id will be updated, any combination element not included within treatment will be deleted.",
                "tags": [
                    "Composites"
                ],
                "parameters": [
                    {
                        "name": "Composites Treatments",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CompositeTreatmentsPayloadForPOST"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Composite-Treatments operation SUCCESS"
                    },
                    "400": {
                        "description": "Invalid/Problematic Input",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Error"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "ExperimentDesign": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id for experiment design entity"
                },
                "name": {
                    "type": "string",
                    "description": "name of experiment design"
                }
            }
        },
        "ExperimentDesignPayload": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of experiment design"
                }
            }
        },
        "ExperimentResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for experiment entity"
                },
                "name": {
                    "type": "string",
                    "description": "name of the experiment entity."
                },
                "subjectType": {
                    "type": "string",
                    "description": "Subject of the Experiment."
                },
                "ExperimentDesign": {
                    "type": "string",
                    "description": "Experiment Design Type"
                },
                "status": {
                    "type": "string",
                    "description": "status of the experiment entity."
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "HypothesisResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for entity"
                },
                "description": {
                    "type": "string",
                    "description": "description of the entity."
                },
                "isNull": {
                    "type": "boolean",
                    "description": "Type of Hypotheses."
                },
                "status": {
                    "type": "string",
                    "description": "status of Hypotheses."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "ExperimentId of experiment entity"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "DependentVariableResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for  entity"
                },
                "required": {
                    "type": "boolean",
                    "description": "boolean vaule to specify dependent variable is required or not."
                },
                "name": {
                    "type": "string",
                    "description": "name of dependent variable."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "ExperimentId of experiment entity"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "FactorResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for  entity"
                },
                "name": {
                    "type": "string",
                    "description": "name of the factor."
                },
                "refFactorTypeId": {
                    "type": "integer",
                    "description": "id of FactorType entity"
                },
                "experimentId": {
                    "type": "integer",
                    "description": "id of experiment entity"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "FactorLevelResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for  entity"
                },
                "value": {
                    "type": "string",
                    "description": "value of the factor level."
                },
                "factorId": {
                    "type": "integer",
                    "description": "id of Factor entity"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "VariablesResponse": {
            "type": "object",
            "properties": {
                "independent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Variable"
                    }
                },
                "exogenous": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Variable"
                    }
                },
                "dependent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DependentVariable"
                    }
                }
            }
        },
        "CompositeTreatmentsResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for  entity"
                },
                "isControl": {
                    "type": "boolean",
                    "description": "isControl boolean value to mark a treatment as control"
                },
                "treatmentNumber": {
                    "type": "integer",
                    "description": "number of the treatment."
                },
                "notes": {
                    "type": "string",
                    "description": "notes related to treatment - optinal field."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "id of experimentId entity"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                },
                "combinationElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CombinationElementResponse"
                    }
                }
            }
        },
        "CombinationElementResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for  entity"
                },
                "name": {
                    "type": "string",
                    "description": "name of the combination element."
                },
                "value": {
                    "type": "string",
                    "description": "value of the combination element."
                },
                "treatmentId": {
                    "type": "integer",
                    "description": "id of treatment entity"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "ExperimentalUnitResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "unique id for  entity"
                },
                "groupId": {
                    "type": "integer",
                    "description": "experimental unit's group id."
                },
                "treatmentId": {
                    "type": "integer",
                    "description": "id of treatment entity"
                },
                "rep": {
                    "type": "integer",
                    "description": "rep number of experimental unit"
                },
                "createdDate": {
                    "type": "string",
                    "description": "created timestamp in UTC."
                },
                "createdUserId": {
                    "type": "string",
                    "description": "created user id for audit tracking."
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "Modified timestamp in UTC."
                },
                "modifiedUserId": {
                    "type": "string",
                    "description": "modified user id for audit tracking."
                }
            }
        },
        "VariablesRquestPayload": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "experimentId"
                },
                "independent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Variable"
                    }
                },
                "exogenous": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Variable"
                    }
                },
                "dependent": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/DependentVariable"
                    }
                }
            }
        },
        "Variable": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of variable"
                },
                "levels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Levels"
                    }
                }
            }
        },
        "DependentVariable": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of variable"
                },
                "required": {
                    "type": "boolean",
                    "description": "required or optional boolean value"
                }
            }
        },
        "Levels": {
            "type": "string"
        },
        "CreateResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "http status code, 201 for success and 4.x.x for errors."
                },
                "message": {
                    "type": "string",
                    "description": "Resource created or error description in case of error."
                },
                "id": {
                    "type": "integer",
                    "description": "id of newely created resource or black in case of error."
                }
            }
        },
        "UpdateResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "http status code, 200 for success and 4.x.x for errors."
                },
                "message": {
                    "type": "string",
                    "description": "Resource updated or error description in case of error."
                },
                "id": {
                    "type": "integer",
                    "description": "id of updated resource or black in case of error."
                }
            }
        },
        "ExperimentPayload": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the experiment entity."
                },
                "subjectType": {
                    "type": "string",
                    "description": "Subject of the Experiment."
                },
                "experimentDesign": {
                    "type": "string",
                    "description": "ExperimentDesign Type."
                },
                "status": {
                    "type": "string",
                    "description": "status of the experiment entity."
                }
            }
        },
        "HypothesisPayload": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "description of the hypothesis entity."
                },
                "isNull": {
                    "type": "boolean",
                    "description": "hypothesis type."
                },
                "status": {
                    "type": "string",
                    "description": "Hypotheses status - ACTIVE, INACTIVE."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "experimentId of experiment entity."
                }
            }
        },
        "FactorType": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "unique id for factor type"
                },
                "type": {
                    "type": "string",
                    "description": "name of the factor type"
                }
            }
        },
        "FactorTypePayload": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "name of the factor type"
                }
            }
        },
        "DependentVariablePayloadForPOST": {
            "type": "object",
            "properties": {
                "required": {
                    "type": "boolean",
                    "description": "is rquired boolean value."
                },
                "name": {
                    "type": "string",
                    "description": "name of dependent variable."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "experimentId of experiment entity."
                }
            }
        },
        "DependentVariablePayloadForPUT": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of dependent varable to update."
                },
                "required": {
                    "type": "boolean",
                    "description": "is rquired boolean value."
                },
                "name": {
                    "type": "string",
                    "description": "name of dependent variable."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "experimentId of experiment entity."
                }
            }
        },
        "FactorPayloadForPOST": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the factor."
                },
                "refFactorTypeId": {
                    "type": "integer",
                    "description": "id of FactorType entity."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "id of experiment entity."
                }
            }
        },
        "FactorPayloadForPUT": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of factor to update."
                },
                "name": {
                    "type": "string",
                    "description": "name of the factor."
                },
                "refFactorTypeId": {
                    "type": "integer",
                    "description": "id of FactorType entity."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "id of experiment entity."
                }
            }
        },
        "FactorLevelPayloadForPOST": {
            "type": "object",
            "properties": {
                "value": {
                    "type": "string",
                    "description": "value of the factor."
                },
                "factorId": {
                    "type": "integer",
                    "description": "id of Factor entity."
                }
            }
        },
        "FactorLevelPayloadForPUT": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of factorLevel to update."
                },
                "value": {
                    "type": "string",
                    "description": "value of the factor."
                },
                "factorId": {
                    "type": "integer",
                    "description": "id of Factor entity."
                }
            }
        },
        "Treatment": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Treatment Id"
                },
                "experimentId": {
                    "type": "integer",
                    "description": "Experiment Id of the treatment"
                },
                "treatmentNumber": {
                    "type": "integer",
                    "description": "Number of the treatment"
                },
                "isControl": {
                    "type": "boolean",
                    "description": "Specifies if treatment is a control treatment"
                },
                "notes": {
                    "type": "string",
                    "description": "Used to specify treatment information"
                }
            }
        },
        "TreatmentsRequestPayloadForPOST": {
            "type": "object",
            "properties": {
                "experimentId": {
                    "type": "integer",
                    "description": "Experiment Id that treatment lives on"
                },
                "treatmentNumber": {
                    "type": "integer",
                    "description": "Number of the treatment"
                },
                "isControl": {
                    "type": "boolean",
                    "description": "Specifies if treatment is a control treatment"
                },
                "notes": {
                    "type": "string",
                    "description": "Used to specify treatment information"
                }
            }
        },
        "TreatmentsRequestPayloadForPUT": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Treatment Id"
                },
                "experimentId": {
                    "type": "integer",
                    "description": "Experiment Id that treatment lives on"
                },
                "treatmentNumber": {
                    "type": "integer",
                    "description": "Number of the treatment"
                },
                "isControl": {
                    "type": "boolean",
                    "description": "Specifies if treatment is a control treatment"
                },
                "notes": {
                    "type": "string",
                    "description": "Used to specify control treatment information"
                }
            }
        },
        "CompositeTreatmentsPayloadForPOST": {
            "type": "object",
            "properties": {
                "adds": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompositeTreatmentsPayloadAdd"
                    }
                },
                "deletes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/ids"
                    }
                },
                "updates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompositeTreatmentsPayloadUpdate"
                    }
                }
            }
        },
        "ids": {
            "type": "integer"
        },
        "CompositeTreatmentsPayloadAdd": {
            "type": "object",
            "properties": {
                "isControl": {
                    "type": "string",
                    "description": "boolean value isControl to mark treatment as control."
                },
                "treatmentNumber": {
                    "type": "integer",
                    "description": "number of the treatment."
                },
                "notes": {
                    "type": "string",
                    "description": "notes related to treatment."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "id of experiment entity."
                },
                "combinationElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompositeTreatmentsCombinationElement"
                    }
                }
            }
        },
        "CompositeTreatmentsPayloadUpdate": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of treatment id to update."
                },
                "isControl": {
                    "type": "string",
                    "description": "boolean value isControl to mark treatment as control."
                },
                "treatmentNumber": {
                    "type": "integer",
                    "description": "number of the treatment."
                },
                "notes": {
                    "type": "string",
                    "description": "notes related to treatment."
                },
                "experimentId": {
                    "type": "integer",
                    "description": "id of experiment entity."
                },
                "combinationElements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/CompositeTreatmentsCombinationElement"
                    }
                }
            }
        },
        "CompositeTreatmentsCombinationElement": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of combination element if updating existing else empty."
                },
                "name": {
                    "type": "string",
                    "description": "name of the combinationElement."
                },
                "value": {
                    "type": "string",
                    "description": "value of the combinationElement."
                }
            }
        },
        "CombinationElementPayloadForPOST": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "name of the combinationElement."
                },
                "value": {
                    "type": "string",
                    "description": "value of the combinationElement."
                },
                "treatmentId": {
                    "type": "integer",
                    "description": "id of treatment entity."
                }
            }
        },
        "CombinationElementPayloadForPUT": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of combinationElement to update."
                },
                "name": {
                    "type": "string",
                    "description": "name of the combinationElement."
                },
                "value": {
                    "type": "string",
                    "description": "value of the combinationElement."
                },
                "treatmentId": {
                    "type": "integer",
                    "description": "id of treatment entity."
                }
            }
        },
        "ExperimentalUnitPayloadForPOST": {
            "type": "object",
            "properties": {
                "groupId": {
                    "type": "integer",
                    "description": "experimental unit's group id"
                },
                "treatmentId": {
                    "type": "integer",
                    "description": "id of treatmentId entity."
                },
                "rep": {
                    "type": "integer",
                    "description": "rep number of experimental unit."
                }
            }
        },
        "ExperimentalUnitPayloadForPUT": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "id of experimental unit to update."
                },
                "groupId": {
                    "type": "integer",
                    "description": "experimental unit's group id"
                },
                "treatmentId": {
                    "type": "integer",
                    "description": "id of treatmentId entity."
                },
                "rep": {
                    "type": "integer",
                    "description": "rep number of experimental unit."
                }
            }
        },
        "Error": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32"
                },
                "code": {
                    "type": "string"
                },
                "errorMessage": {
                    "type": "string"
                }
            }
        }
    }
}