{
  "swagger": "2.0",
  "info": {
    "title": "Experiments API",
    "description": "Experiment APIs to create experiment model, managed by the Cosmos team. Reach out in the #experiments channel on Slack for support.",
    "version": "v4"
  },
  "host": "api01-np.agro.services",
  "schemes": [
    "https"
  ],
  "basePath": "/experiments-api",
  "paths": {
    "/ping": {
      "get": {
        "summary": "simple ping call",
        "description": "This is a ping call to the service to check if it's up",
        "operationId": "ping",
        "tags": [
          "Ping"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Successful Ping Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/experiments": {
      "get": {
        "summary": "get all experiment entities",
        "description": "This endpoint returns information about the experiments.\n",
        "operationId": "getExperiments",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags.category",
            "in": "query",
            "description": "Tag categories comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags.value",
            "in": "query",
            "description": "Tag values comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Pagination argument to limit the amount of returned results",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination argument to offset the returned results",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of experiments",
            "schema": {
              "$ref": "#/definitions/PaginatedExperimentResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more experiment entities",
        "description": "Creates new experiment(s) in the Experiments System. The definition to use for the POST body is based upon the source query parameter as described below: <ul><li>template: <pre>{\n  \"id\": 0,\n  \"numberOfCopies\": 0,\n  \"name\": \"new name\"\n}</pre><br/></li><li>experiment: <pre>{\n  \"ids\": [\n    0\n  ],\n  \"numberOfCopies\": 0\n}</pre><br/></li><li>undefined/not provided: <pre>[\n  {\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"experimentDesign\": \"string\",\n    \"status\": \"string\",\n    \"tags\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\",\n        \"experimentId\": 0\n      }\n    ],\n    \"owners\": [\n      \"string\"\n    ],\n    \"ownerGroups\": [\n      \"string\"\n    ],\n    \"reviewers\": [\n      \"string\"\n    ],\n  \"reviewerUsers\": [\n      \"string\"\n    ],\n \"request\": {\n      \"id\": \"string\",\n      \"type\": \"string\"\n    }\n  }\n]</pre></li></ul>",
        "operationId": "postExperiments",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source",
            "type": "string",
            "in": "query"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Experiment Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}": {
      "get": {
        "summary": "get one experiment entity",
        "description": "The Experiments endpoint returns information about the experiment entities in Experiments System.\n",
        "operationId": "getExperimentById",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one experiment entity",
        "description": "update experiment entity in Experiments System.\n",
        "operationId": "putExperimentById",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentPayload"
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "deletes a single experiment",
        "description": "This endpoint allows a user to delete a experiment",
        "operationId": "deleteExperiment",
        "tags": [
          "Experiments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment Deleted",
            "schema": {
              "$ref": "#/definitions/GenericDeleteSuccess"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/blocks": {
      "patch": {
        "summary": "rename blocks for experiment",
        "description": "Renames the specified blocks that belong to the experiment.",
        "operationId": "renameExperimentsBlocks",
        "tags": [
          "Blocks"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "blockRenames",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockRenameRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success with no content"
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/capacity-request-sync": {
      "post": {
        "summary": "Synchronizes capacity request data with an experiment's data",
        "description": "Synchronizes specific fields from a request from the Capacity Request system with the data stored for an Experiment",
        "operationId": "capacityRequestSync",
        "tags": [
          "Capacity"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "Capacity Request Sync Values",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "locations": {
                  "type": "integer"
                },
                "number of rows": {
                  "type": "integer"
                },
                "plot row length uom": {
                  "type": "string"
                },
                "reps": {
                  "type": "integer"
                },
                "row length": {
                  "type": "integer"
                },
                "row spacing": {
                  "type": "integer"
                },
                "row spacing uom": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Sync Successful"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/treatments": {
      "get": {
        "summary": "get all treatment details, including combination elements with treatment variable and level information for an experiment",
        "description": "This endpoint returns information about the treatment and and combination elements entities associated with an Experiment",
        "operationId": "getComposites_TreatmentsByExperimentId",
        "tags": [
          "Treatments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "updates all treatments for an experiment",
        "description": "This endpoint accepts treatments and merges existing treatments",
        "operationId": "handleTreatmentsForExperiment",
        "tags": [
          "Treatments"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "treatments",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TreatmentPUTPayload"
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/unit-specification-details": {
      "get": {
        "summary": "Get all unit specification details for an experiment",
        "description": "Returns all unit specification details for an experiment\n",
        "operationId": "getUnit-specification-detailsByExperimentId",
        "tags": [
          "Unit Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates, updates and deletes UnitSpecificationDetail",
        "description": "Creates, updates and deletes UnitSpecificationDetail",
        "operationId": "post_compositesUnitSpecificationDetail",
        "tags": [
          "Unit Specification Details"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "UnitSpecificationDetail",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeUnitSpecificationDetailPayloadForPOST"
              }
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "UnitSpecificationDetail operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/response-variables": {
      "get": {
        "summary": "get all response variables for given experiment id.",
        "description": "This endpoint returns information about the response variable entities associated with one Experiment.\n",
        "operationId": "getResponseVariablesByExperimentId",
        "tags": [
          "Response Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Response Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResponseVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/design-specification-details": {
      "get": {
        "summary": "Get all design specification details for an experiment",
        "description": "Returns all design specification details for an experiment\n",
        "operationId": "getDesign-specification-detailsByExperimentId",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Save all design specification details for an experiment",
        "description": "Save all design specification details for an experiment",
        "operationId": "save-design-specification-detailsByExperimentId",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "designSpecBody",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignSpecificationDetail"
              }
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Save Design Specification Detail Success"
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/block-locations": {
      "get": {
        "summary": "location associations from an experiment.",
        "description": "Returns Sets associations to all locations in a given experiment",
        "operationId": "getBlockLocationByExperimentId",
        "tags": [
          "BlockLocation"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Location associations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockLocation"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "partially update block locations",
        "description": "Allows for block locations to be partially updated. Currently only allows the update of the setId field.",
        "operationId": "patchBlockLocation",
        "tags": [
          "BlockLocation",
          "Sets"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "SetAssociation",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SetAssocationPayloadForPATCH"
              }
            },
            "description": "The information to associate a set to a block-location"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "BlockLocation Patch SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "summary": "save units for block location",
        "description": "Allows for units to be saved by block locations.",
        "operationId": "postExperimentBlockLocation",
        "tags": [
          "BlockLocation",
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "BlockLocations",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockLocationForPOST"
              }
            },
            "description": "The information to save units by block-location"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "BlockLocation POST SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "delete units block locations",
        "description": "Allows for experimental units to be delete by block-location. Does not work if the block location is associated to a set",
        "operationId": "deleteExperimentBlockLocation",
        "tags": [
          "BlockLocation",
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "location",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "The location part of the block-location"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "The block part of the block-location"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "BlockLocation DELETE SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/experiments/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for a given experiment id",
        "description": "This endpoint returns information about the experimental units entities associated with an Experiment",
        "operationId": "getExperimentalUnitsByExperimentId",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ExperimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "partially update experimental units",
        "description": "Allows for a set of experimental units to be partially updated. Currently only allows the update of the entryId field.",
        "operationId": "patchExperimental-units",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Experimental Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitPayloadForPATCH"
              }
            },
            "description": "Numeric Id of the Experimental Unit to patch"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Experimental Unit Patch SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/experiments/{id}/treatment-variables": {
      "get": {
        "summary": "get all treatment variables for given experiment id.",
        "description": "This endpoint returns information about the treatment variable entities associated with one Experiment.\n",
        "operationId": "getTreatmentVariablesByExperimentId",
        "tags": [
          "Treatment Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "TreatmentVariables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TreatmentVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/permissions": {
      "get": {
        "summary": "get user permissions for the user for experiment id",
        "description": "This endpoint returns information about the user permissions om experiment",
        "operationId": "getPermissionsForUserByExperimentId",
        "tags": [
          "Permissions"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PermissionsResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/review": {
      "patch": {
        "summary": "Updates the review status of the experiment",
        "description": "Allows updating the review status of an experiment",
        "operationId": "reviewExperimentById",
        "tags": ["Experiments"],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "statusInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReviewInput"
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated status"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/summary": {
      "get": {
        "summary": "get the experiment summary for given experiment id.",
        "description": "This endpoint returns summary information about the experiment, such as name, number of variables, etc.\n",
        "operationId": "getSummaryByExperimentId",
        "tags": [
          "Experiment Summary"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment Summary",
            "schema": {
              "$ref": "#/definitions/ExperimentSummary"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/variables": {
      "get": {
        "summary": "get all variables for given experiment id.",
        "description": "This endpoint returns information about the variable entities associated with one Experiment.\n",
        "operationId": "getVariablesByExperimentId",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariablesResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Save variables",
        "description": "Adds or updates the variables belogning to the specified experiment.",
        "operationId": "postVariables",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Variables",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VariablesRequestPayload"
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },

    "/getDoc/{fileName}": {
      "get": {
        "summary": "Gets a markdown of a documentation file",
        "description": "Returns markdown string of documentation",
        "operationId": "getDoc",
        "tags": [
          "Documentation"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fileName",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Markdown of requested page"
          },
          "403": {
            "description": "Forbidden. Catch All From CloudFront"
          }
        }
      }
    },
    "/preferences/treatment-variables/lists": {
      "post": {
        "summary": "Adds list ids to user preferences for treatment variables",
        "description": "Accepts an array of list ids to set for the user preferences for material lists",
        "operationId": "postMaterialListPreferences",
        "tags": ["Preferences"],
        "produces": ["application/json"],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "ListsValue",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ListPreferencesPayload"
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Preferences Updated",
            "schema": {
              "$ref": "#/definitions/ListPreferencesResponse"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ref-data-source-types": {
      "get": {
        "summary": "Gets all Reference Data Source Types and all their defined Data Sources",
        "description": "Returns an array of reference data source types and their data sources",
        "operationId": "getRefDataSourceTypes",
        "tags": [
          "Ref Data Sources"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "All Reference Data Source Type Entities With Data Sources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RefDataSourceTypeWithSources"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },

    "/set-entries": {
      "get": {
        "summary": "Gets all set entries for a set.",
        "description": "Retrieves all set entries that belong to the given set id.",
        "operationId": "getSetEntries",
        "tags": ["Set Entry"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "query",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Set Entry/Treatment/Rep Mapping",
            "schema": {
              "$ref": "#/definitions/SetEntryTreatmentRepInfo"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Set Entries Do Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Returns a mapping of Set Entry Ids to corresponding Treatment Id, Treatment Number and Rep Number",
        "description": "Returns the relationship betweten Set Entry Id and Treatment",
        "operationId": "retrieveSetEntryRelationships",
        "tags": [
          "Set Entry"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Set Entry Ids",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Set Entry/Treatment/Rep Mapping",
            "schema": {
              "$ref": "#/definitions/SetEntryTreatmentRepInfo"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "patch": {
        "summary": "Updates set entry IDs",
        "description": "Updates a list of existing set entry IDs with the incoming values",
        "operationId": "updateSetEntryIds",
        "tags": [
          "Set Entry"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Set Entry ID Pairs",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SetEntryIdPairForPATCH"
              }
            },
            "description": "Array of pairs made of existing and incoming set entry IDs"
          }
        ],
        "responses": {
          "204": {
            "description": "Success with no content"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sets/{setId}/reset": {
      "post": {
        "summary": "Resets a set back to its original state",
        "description": "Resets the set in a field packed experiment back to its original number of reps and units.",
        "operationId": "resetSet",
        "tags": ["Sets"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Success with no content"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sets/{setId}/set-entries": {
      "put": {
        "summary": "Specifies the experimental units to be used in a set",
        "description": "Specifies the experimental units to be used in a set.",
        "operationId": "setEntriesForSetPut",
        "tags": ["Set Entry"],
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "setEntries",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SetEntryPUTBody"
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/sets/{setId}/treatment-details": {
      "get": {
        "summary": "Gets all levels for each treatment in a set",
        "description": "Retrieves each treatment and their levels for a given set id",
        "operationId": "getTreatmentDetails",
        "tags": ["Set Entry"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "setId",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Mapping of treatment ids to level information",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TreatmentLevelDetails"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },

    "/templates": {
      "get": {
        "summary": "get all Template entities",
        "description": "This endpoint returns information about the Templates.\n",
        "operationId": "getTemplates",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags.category",
            "in": "query",
            "description": "Tag categories comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags.value",
            "in": "query",
            "description": "Tag values comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Pagination argument to limit the amount of returned results",
            "type": "integer"
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Pagination argument to offset the returned results",
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of templates",
            "schema": {
              "$ref": "#/definitions/PaginatedExperimentResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more template entities",
        "description": "Creates new template(s) in the Experiments System. The definition to use for the POST body is based upon the source query parameter as described below: <ul><li>experiment: <pre>{\n  \"id\": 0,\n  \"numberOfCopies\": 0,\n  \"name\": \"new name\"\n}</pre><br /></li><li>template: <pre>{\n  \"ids\": [\n    0\n  ],\n  \"numberOfCopies\": 0\n}</pre><br /></li><li>undefined/not provided: <pre>[\n  {\n    \"name\": \"string\",\n    \"description\": \"string\",\n    \"experimentDesign\": \"string\",\n    \"status\": \"string\",\n    \"tags\": [\n      {\n        \"name\": \"string\",\n        \"value\": \"string\",\n        \"experimentId\": 0\n      }\n    ],\n    \"owners\": [\n      \"string\"\n    ],\n    \"ownerGroups\": [\n      \"string\"\n    ]\n \"reviewers\": [\n      \"string\"\n    ],\n  \"reviewerUsers\": [\n      \"string\"\n    ],\n  }\n]</pre></li></ul>",
        "operationId": "postTemplates",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "source",
            "type": "string",
            "in": "query"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Template Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "summary": "get one Template entity",
        "description": "The templates endpoint returns information about the Template entities in templates System.\n",
        "operationId": "getTemplateById",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Template entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one Template entity",
        "description": "update Template entity in templates System.\n",
        "operationId": "putTemplateById",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Template",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentPayload"
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Template entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "deletes a single template",
        "description": "This endpoint allows a user to delete a template",
        "operationId": "deleteTemplate",
        "tags": [
          "Templates"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "integer",
            "in": "path",
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Template Deleted",
            "schema": {
              "$ref": "#/definitions/GenericDeleteSuccess"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/blocks": {
      "patch": {
        "summary": "rename blocks for template",
        "description": "Renames the specified blocks that belong to the template.",
        "operationId": "renameTemplatesBlocks",
        "tags": [
          "Blocks"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "blockRenames",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockRenameRequest"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Success with no content"
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/block-locations": {
      "post": {
        "summary": "save units for block location",
        "description": "Allows for units to be saved by block locations.",
        "operationId": "postTemplateBlockLocation",
        "tags": [
          "BlockLocation",
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "BlockLocations",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/BlockLocationForPOST"
              }
            },
            "description": "The information to save units by block-location"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "BlockLocation POST SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "summary": "delete units block locations",
        "description": "Allows for experimental units to be delete by block-location. Does not work if the block location is associated to a set",
        "operationId": "deleteTemplateBlockLocation",
        "tags": [
          "BlockLocation",
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "description": "experiment id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "location",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "The location part of the block-location"
          },
          {
            "name": "blockId",
            "in": "query",
            "required": true,
            "type": "integer",
            "description": "The block part of the block-location"
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "BlockLocation DELETE SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/templates/{id}/treatments": {
      "get": {
        "summary": "get all treatments and combination elements for a given Template id",
        "description": "This endpoint returns information about the treatment and and combination elements entities associated with a Template",
        "operationId": "getComposites_TreatmentsByTemplateId",
        "tags": [
          "Treatments"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "updates all treatments for a template",
        "description": "This endpoint accepts treatments and merges existing treatments",
        "operationId": "handleTreatmentsForTemplate",
        "tags": [
          "Treatments"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "treatments",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TreatmentPUTPayload"
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }

    },
    "/templates/{id}/unit-specification-details": {
      "get": {
        "summary": "Get all unit specification details for a Template",
        "description": "Returns all unit specification details for a Template\n",
        "operationId": "getUnit-specification-detailsByTemplateId",
        "tags": [
          "Unit Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Creates, updates and deletes UnitSpecificationDetail",
        "description": "Creates, updates and deletes UnitSpecificationDetail",
        "operationId": "postTemplate_compositesUnitSpecificationDetail",
        "tags": [
          "Unit Specification Details"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "UnitSpecificationDetail",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeUnitSpecificationDetailPayloadForPOST"
              }
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "UnitSpecificationDetail operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/response-variables": {
      "get": {
        "summary": "get all Response variables for given Template id.",
        "description": "This endpoint returns information about the response variable entities  associated with one Template.\n",
        "operationId": "getResponseVariablesByTemplateId",
        "tags": [
          "Response Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Response Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ResponseVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/design-specification-details": {
      "get": {
        "summary": "Get all design specification details for a Template",
        "description": "Returns all design specification details for a Template\n",
        "operationId": "getDesign-specification-detailsByTemplateId",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Design Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Save all design specification details for a template",
        "description": "Save all design specification details for a template",
        "operationId": "save-design-specification-detailsByTemplateId",
        "tags": [
          "Design Specification Detail"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "designSpecBody",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DesignSpecificationDetail"
              }
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Save Design Specification Detail Success"
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for a given Template id",
        "description": "This endpoint returns information about the experimental units entities associated with a Template",
        "operationId": "getexperimentalUnitsByTemplateId",
        "tags": [
          "Experimental Units"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "experimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/treatment-variables": {
      "get": {
        "summary": "get all treatment variables for given Template id.",
        "description": "This endpoint returns information about the treatment varaible entities associated with one Template.\n",
        "operationId": "getTreatmentVariablesByTemplateId",
        "tags": [
          "Treatment Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatment Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TreatmentVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/permissions": {
      "get": {
        "summary": "get user permissions for the user for Template id",
        "description": "This endpoint returns information about the user permissions om Template",
        "operationId": "getPermissionsForUserByTemplateId",
        "tags": [
          "Permissions"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Permissions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/PermissionsResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/review": {
      "patch": {
        "summary": "Updates the review status of the experiment",
        "description": "Allows updating the review status of an experiment",
        "operationId": "reviewTemplateById",
        "tags": ["Templates"],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "statusInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/ReviewInput"
            },
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully updated status"
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/summary": {
      "get": {
        "summary": "get the Template summary for given Template id.",
        "description": "This endpoint returns summary information about the Template, such as name, number of variables, etc.\n",
        "operationId": "getSummaryByTemplateId",
        "tags": [
          "Template Summary"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Template Summary",
            "schema": {
              "$ref": "#/definitions/ExperimentSummary"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/templates/{id}/variables": {
      "get": {
        "summary": "get all variables for given Template id.",
        "description": "This endpoint returns information about the variable entities associated with one Template.\n",
        "operationId": "getVariablesByTemplateId",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariablesResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Template Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Save variables",
        "description": "Adds or updates the variables belogning to the specified template.",
        "operationId": "templatePostVariables",
        "tags": [
          "Variables"
        ],
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Variables",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VariablesRequestPayload"
            }
          },
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },

    "/unit-specifications": {
      "get": {
        "summary": "Get all unit specification entities",
        "description": "Returns all unit specifications\n",
        "operationId": "getUnitSpecifications",
        "tags": [
          "Unit Specification"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecification"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-types": {
      "get": {
        "summary": "Get all unit type entities",
        "description": "Returns all unit types\n",
        "operationId": "getUnitTypes",
        "tags": [
          "Unit Type"
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Unit Type Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitType"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/deactivations": {
      "post": {
        "summary": "Deactivate experimental units for analysis",
        "description": "Save analysis deactivation reason for provided unit/entry ids",
        "operationId": "deactivateExperimentalUnits",
        "tags": ["Deactivate Units"],
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "ExperimentalUnitDeactivation",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitDeactivationPayloadForPOST"
              }
            }
          },
          {
            "name": "username",
            "description": "An optional header to allow APIs to indicate which user they are modifying data on behalf of. This is only required for API-to-API calls.",
            "in": "header",
            "type": "string",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/chemAP-sync": {
      "post": {
        "summary": "Create a Chemical Application plan based on an existing Experiment",
        "description": "Create a Chemical Application plan based on an existing Experiment and set up the association between the two",
        "operationId": "chemApSync",
        "tags": ["ChemAP"],
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "ChemApSyncBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChemApSyncPayload"
            }
          },
          {
            "name": "username",
            "description": "A required header for entitlement check.",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "object",
              "properties": {
                "planId": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/chemAP-sync/set-entry-associations": {
      "post": {
        "summary": "Assign set entry associations to chemical application plan intents",
        "description": "Creates intent associations on the chemical application plan associated to the experiment for the set entries belonging to that experiment.",
        "operationId": "chemApSyncSetEntryAssociations",
        "tags": ["ChemAP"],
        "produces": ["application/json"],
        "consumes": ["application/json"],
        "parameters": [
          {
            "name": "ChemApSyncBody",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChemApSyncPayload"
            }
          },
          {
            "name": "username",
            "description": "A required header for entitlement check.",
            "in": "header",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AssociatedTreatmentVariable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the associated treatment variable."
        },
        "name": {
          "type": "string",
          "description": "Name of the associated treatment variable."
        }
      }
    },
    "BlockLocationForPOST": {
      "type": "object",
      "properties": {
        "location": {
          "type": "integer",
          "description": "The location part of the block-location"
        },
        "blockId": {
          "type": "integer",
          "description": "The block part of the block-location"
        },
        "units": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "rep": {
                "type": "integer",
                "description": "The rep number of the experimental unit"
              },
              "treatmentId": {
                "type": "integer",
                "description": "The id of the treatment that the experimental unit will receieve"
              }
            },
            "required": ["rep", "treatmentId"]
          }
        }
      },
      "required": ["location", "blockId", "units"]
    },
    "BlockRenameRequest": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the block to rename."
          },
          "name": {
            "type": "string",
            "description": "The new name of the block."
          }
        }
      }
    },
    "ChemApSyncPayload": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "integer",
          "description": "ID of the Experiment the Chemical Application plan will be created from."
        }
      },
      "required": ["experimentId"]
    },
    "ClusterResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the treatment variable level."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LevelItem"
          }
        },
        "objectType": {
          "type": "string",
          "description": "Indicates the type of item object.  This value will be 'Cluster' for this object."
        }
      }
    },
    "ClusterRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the treatment variable level."
        },
        "_refId": {
          "type": "integer",
          "description": "Reference ID for the level.  This may be references by an treatmrntvariableassociation."
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LevelItem"
          }
        },
        "objectType": {
          "type": "string",
          "description": "Indicates the type of item object.  This value will be 'Cluster' for this object."
        }
      }
    },
    "CompositeTreatmentsCombinationElementGET": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for combination element"
        },
        "treatmentVariableId": {
          "type": "integer",
          "description": "Id of the treatment variable this combination element refers to"
        },
        "treatmentVariableName": {
          "type": "string",
          "description": "Name of the treatment variable this combination element refers to"
        },
        "treatmentVariableLevel": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "description": "Id of the treatment variable level"
            },
            "value": {
              "type": "object",
              "properties": {
                "items": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  }
                }
              },
              "description": "value of the treatment variable level"
            }
          }
        }
      }
    },
    "CompositeTreatmentsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "isControl": {
          "type": "boolean",
          "description": "isControl boolean value to mark a treatment as control"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment - optional field."
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experimentId entity"
        },
        "controlTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsCombinationElementGET"
          }
        },
        "inAllBlocks": {
          "type": "boolean",
          "description": "boolean to specify if the treatment is in all blocks."
        },
        "block": {
          "type": "string",
          "description": "the block that the treatment belongs to."
        },
        "blockId": {
          "type": "integer",
          "description": "the ID for the block that the treatment belongs to."
        },
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "the block that the treatment belongs to."
              },
              "blockId": {
                "type": "integer",
                "description": "the ID for the block that the treatment belongs to."
              },
              "numPerRep": {
                "type": "integer",
                "description": "the number of times the treatment occurs per rep."
              }
            }
          }
        }
      }
    },
    "CompositeUnitSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "adds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitSpecificationDetailPayloadForPOST"
          }
        },
        "deletes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ids"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitSpecificationDetailPayloadForPUT"
          }
        }
      }
    },
    "CreateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "http status code, 201 for success and 4.x.x for errors."
        },
        "message": {
          "type": "string",
          "description": "Resource created or error description in case of error."
        },
        "id": {
          "type": "integer",
          "description": "id of newly created resource or black in case of error."
        }
      }
    },
    "DesignSpecificationDetail": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "string",
          "description": "the maximum number of units/entries allowed in a rep"
        },
        "minRep": {
          "type": "string",
          "description": "the minimum number of reps allowed for the experiment"
        },
        "repRangeMin": {
          "type": "string",
          "description": "the minimum number of units/entries allowed in a rep"
        },
        "repRangeMax": {
          "type": "string",
          "description": "the maximum number of units/entries allowed in a rep"
        },
        "repDimensionX": {
          "type": "string",
          "description": "the maximum number of units/entries allowed in a rep"
        },
        "repDimensionY": {
          "type": "string",
          "description": "the maximum number of units/entries allowed in a rep"
        },
        "reps": {
          "type": "string",
          "description": "the maximum number of units/entries allowed in a rep"
        },
        "areAllBlocksAtAllLocations": {
          "type": "boolean",
          "description": "indicates if all experiment blocks are intended to be tested at all locations where the experiment will be run"
        },
        "borderSize": {
          "type": "integer",
          "description": "the number of experimental units that separate one set from another"
        },
        "repBufferSize": {
          "type": "integer",
          "description": "the number of experimental units that separate one rep from another"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "errorCode": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ExperimentalUnitDeactivationPayloadForPOST": {
      "type": "object",
      "properties": {
        "deactivationReason": {
          "type": "string",
          "description": "The reason for deactivation. This is the Answer key for Question code ADEACTR."
        },
        "setEntryId": {
          "type": "integer",
          "description": "If applicable, the setEntryId for the unit to be deactivated. If present, this takes priority over the unit id"
        },
        "id": {
          "type": "integer",
          "description": "The unit id to be deactivated"
        }
      },
      "required": ["deactivationReason"]
    },
    "ExperimentalUnitPayloadForPATCH": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of experimental unit to update."
        },
        "setEntryId": {
          "type": "integer",
          "description": "set entry id for experimental unit."
        }
      }
    },
    "ExperimentalUnitResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "location": {
          "type": "integer",
          "description": "the location of the experimental unit"
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit"
        },
        "setEntryId": {
          "type": "integer",
          "description": "the set entry id for the experimental unit"
        },
        "block": {
          "type": "string",
          "description": "the block that the experimental unit belongs to."
        },
        "blockId": {
          "type": "integer",
          "description": "the ID for the block that the experimental unit belongs to."
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "deactivationReason": {
          "type": "string",
          "description": "The reason for deactivation. This is the Answer key for Question code ADEACTR."
        }
      }
    },
    "ExperimentPayload": {
      "type": "object",
      "properties": {
        "analysisModelSubType": {
          "type": "string",
          "example": "BLUE"
        },
        "analysisModelType": {
          "type": "string",
          "example": "RCB"
        },
        "name": {
          "type": "string",
          "description": "name of the experiment entity."
        },
        "description": {
          "type": "string",
          "description": "Description of the Experiment."
        },
        "experimentDesign": {
          "type": "string",
          "description": "ExperimentDesign Type."
        },
        "status": {
          "type": "string",
          "description": "status of the experiment entity."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagPayloadForPOST"
          }
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownerGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reviewerUsers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request": {
          "type": "object",
          "description": "The identifiers for the Capacity Request to associate with the experiment. This element is optional.",
          "properties": {
            "id": {
              "type": "string",
              "description": "The id of the capacity request"
            },
            "type": {
              "type": "string",
              "description": "The type of capacity request('field' or 'ce')"
            }
          },
          "required": [
            "id",
            "type"
          ]
        },
        "randomizationStrategyCode": {
          "type": "string",
          "description": "The type of randomization to be used for this experiment"
        }
      }
    },
    "PaginatedExperimentResponse": {
      "type": "object",
      "properties": {
        "pageResults": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentResponse"
          },
          "description": "array of paginated results subject to offset/limit"
        },
        "totalResultsLength": {
          "type": "integer",
          "description": "The amount of results prior to applying pagination"
        },
        "pageResultsLength": {
          "type": "integer",
          "description": "The amount of results after applying pagination"
        }
      }
    },
    "ExperimentResponse": {
      "type": "object",
      "properties": {
        "analysisModelSubType": {
          "type": "string",
          "example": "BLUE"
        },
        "analysisModelType": {
          "type": "string",
          "example": "RCB"
        },
        "id": {
          "type": "integer",
          "description": "unique id for experiment entity"
        },
        "name": {
          "type": "string",
          "description": "name of the experiment entity."
        },
        "description": {
          "type": "string",
          "description": "description of the Experiment."
        },
        "ExperimentDesign": {
          "type": "string",
          "description": "Experiment Design Type"
        },
        "status": {
          "type": "string",
          "description": "status of the experiment entity."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tags"
          }
        },
        "owners": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ownerGroups": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "randomizationStrategyCode": {
          "type": "string",
          "description": "The type of randomization to be used for this experiment"
        },
        "reviewers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reviewerUsers": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "ExperimentSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of the experiment."
        },
        "name": {
          "type": "string",
          "description": "name of the experiment."
        },
        "numberOfBlocks": {
          "type": "integer",
          "description": "the number of experiment blocks associated with the experiment."
        },
        "numberOfReps": {
          "type": "integer",
          "description": "the number of replications per location associated with the experiment"
        },
        "numberOfLocations": {
          "type": "integer",
          "description": "the number of locations associated with the experiment"
        },
        "numberOfVariables": {
          "type": "integer",
          "description": "the number of variables associated with the experiment."
        },
        "numberOfTreatments": {
          "type": "integer",
          "description": "the number of treatments associated with the experiment."
        },
        "numberOfExperimentalUnits": {
          "type": "integer",
          "description": "the number of experimental units associated with the experiment."
        },
        "numberOfUnitSpecs": {
          "type": "integer",
          "description": "the number of unit specs associated with the experiment."
        },
        "nameOfUnitType": {
          "type": "string",
          "description": "Name of experimental unit associated with the experiment."
        },
        "numberOfTreatmentVariables": {
          "type": "integer",
          "description": "the number of treatment variables associated with the experiment."
        },
        "numberOfResponseVariables": {
          "type": "integer",
          "description": "the number of response variables associated with the experiment."
        },
        "status": {
          "type": "string",
          "description": "status of the experiment"
        },
        "statusComment": {
          "type": "string",
          "description": "most recent review rejection comment"
        }
      }
    },
    "GenericDeleteSuccess":{
      "type": "object",
      "properties":{
        "id": {
          "type": "integer",
          "description": "Experiment/Template id"
        }
      }
    },
    "SetAssocationPayloadForPATCH": {
      "type": "object",
      "properties": {
        "blockId": {
          "type": "integer",
          "description": "id of the block to associate to the set"
        },
        "location": {
          "type": "integer",
          "description": "the location number to associate to the set"
        },
        "setId": {
          "type": "integer",
          "description": "set id for the block-location"
        }
      }
    },
    "ids": {
      "type": "integer"
    },
    "LevelItem": {
      "type": "object",
      "properties": {
        "objectType": {
          "type": "string",
          "description": "Indicates the type of item object.  This may be one of: 'Catalog', 'Other', or 'Composite'"
        },
        "label": {
          "type": "string",
          "description": "The name of the property.  In the case of simple treatment variables, this will be the same as the name of the treatment variables.  In the case of complex treatment variables, this will be the name of the property."
        },
        "text": {
          "type": "string",
          "description": "In the case of a simple treatment variable, this is the plain-text value.  In the case of a property type of catalog, this is the plain-text value specified when a catalog item could not be found."
        },
        "refId": {
          "type": "string",
          "description": "Used in the case when the property type is catalog.  This is the ID of the referenced item in the catalog."
        },
        "catalogType": {
          "type": "string",
          "description": "Indicates the which source the catalog is referencing.  Catalog sources may be found here: https://inventory-api.velocity-np.ag/types/"
        }
      }
    },
    "ListPreferencesPayload": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "listIds": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "ListPreferencesResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "url": {
          "type": "string"
        },
        "method": {
          "type": "string"
        }
      }
    },
    "BlockLocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "the id of the block-location record"
        },
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id"
        },
        "location": {
          "type": "integer",
          "description": "The location the Set is associated to"
        },
        "setId": {
          "type": "integer",
          "description": "The Set Id that is associated to the location in the Experiment"
        },
        "block": {
          "type": "string",
          "description": "the name of the block the set is associated to"
        },
        "blockId": {
          "type": "integer",
          "description": "the ID for the block that the set is associated to"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "NestedTreatmentVariable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the nested treatment variable."
        },
        "name": {
          "type": "string",
          "description": "Name of the nested treatment variable."
        }
      }
    },
    "PermissionsResponse": {
      "type": "string"
    },
    "RefDataSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id of the data source"
        },
        "name": {
          "type": "string",
          "description": "name of the data source"
        },
        "refId": {
          "type": "string",
          "description": "optional reference Id for the data source"
        },
        "refDataSourceTypeId": {
          "type": "integer"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "RefDataSourceTypeWithSources": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of the data source type"
        },
        "type": {
          "type": "string",
          "description": "name of the data source type"
        },
        "refDataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RefDataSource"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "ResponseVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "required": {
          "type": "boolean",
          "description": "required or optional boolean value"
        },
        "questionCode": {
          "type": "string",
          "description": "refers to Q&A application , its an optional field"
        }
      }
    },
    "ResponseVariableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "required": {
          "type": "boolean",
          "description": "boolean value to specify response variable is required or not."
        },
        "name": {
          "type": "string",
          "description": "name of response variable."
        },
        "experimentId": {
          "type": "integer",
          "description": "ExperimentId of experiment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "questionCode": {
          "type": "string",
          "description": "Refers to Q&A question Code"
        }
      }
    },
    "ReviewInput": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "type": "string",
          "description": "Status to set the experiment to. Examples are: DRAFT, SUBMITTED, APPROVED, REJECTED"
        },
        "timestamp": {
          "type": "string",
          "description": "Timestamp required for submitting a review. Must be greater than the current date"
        },
        "comment": {
          "type": "string",
          "description": "An optional description for reviewing an experiment"
        }
      }
    },
    "SetEntryIdPairForPATCH": {
      "type": "object",
      "properties": {
        "existingSetEntryId": {
          "type": "integer",
          "description": "ID of the existing set entry that it is intended to change"
        },
        "incomingSetEntryId": {
          "type": "integer",
          "description": "Set entry ID that will replace the existing one"
        }
      }
    },
    "SetEntryPUTBody": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "factorLevelIds": {
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "location": {
            "type": "integer"
          },
          "rep": {
            "type": "integer"
          },
          "setEntryId": {
            "type": "integer"
          }
        }
      }
    },
    "SetEntryTreatmentRepInfo": {
      "type": "object",
      "properties": {
        "setEntryId": {
          "type": "object",
          "properties": {
            "treatmentId": {
              "type": "integer",
              "description": "Treatment Id that the specific set entry maps to"
            },
            "treatmentNumber": {
              "type": "integer",
              "description": "Treatment Number that the specific set entry maps to"
            },
            "rep": {
              "type": "integer",
              "description": "Rep number that the specific set entry maps to"
            }
          }
        }
      }
    },
    "TagPayloadForPOST": {
      "type": "object",
      "properties": {
        "category": {
          "type": "string",
          "description": "category of the tag."
        },
        "value": {
          "type": "string",
          "description": "value of the tag."
        }
      }
    },
    "Tags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Tag Id"
        },
        "category": {
          "type": "string",
          "description": "Category of the tag"
        },
        "value": {
          "type": "string",
          "description": "Value of the tag"
        },
        "experimentId": {
          "type": "string",
          "description": "tag associated to experiment "
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "TreatmentLevelDetails": {
      "type": "object",
      "properties": {
        "treatmentId": {
          "type": "integer"
        },
        "treatmentVariableLevels": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "treatmentVariableName": {
                "type": "integer"
              },
              "items": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "TreatmentPUTPayload": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "controlTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "type": "string"
          },
          "combinationElements": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "treatmentVariableLevelId": {
                  "type": "number"
                }
              }
            }
          },
          "block": {
            "type": "string"
          },
          "inAllBlocks": {
            "type": "boolean"
          },
          "blocks": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string"
                },
                "blockId": {
                  "type": "number"
                },
                "numPerRep": {
                  "type": "number"
                }
              }
            }
          },
          "treatmentNumber":  {
            "type": "integer",
            "description": "Treatment Number"
          }
        }
      }
    },
    "TreatmentVariable": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the treatment variable"
        },
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "associatedTreatmentVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssociatedTreatmentVariable"
          }
        },
        "nestedTreatmentVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NestedTreatmentVariable"
          }
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterResponse"
          }
        },
        "tier": {
          "type": "integer",
          "description": "the tier of the split that the variable is part of"
        },
        "isBlockingFactorOnly": {
          "type": "boolean",
          "description": "indicates whether the treatment variable should be analyzed or if it only exists to enable blocking"
        }
      }
    },
    "TreatmentVariableAssociationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the association"
        },
        "associatedLevelId": {
          "type": "integer",
          "description": "Id of the treatment variable level on the associated side of relationship"
        },
        "nestedLevelId": {
          "type": "integer",
          "description": "Id of the treatment variable level on the nested side of relationship"
        }
      }
    },
    "TreatmentVariableAssociationRequest": {
      "type": "object",
      "properties": {
        "associatedLevelRefId": {
          "type": "integer",
          "description": "RefId of the treatment variable level on the associated side of relationship.  This should reference a _refId defined on a level"
        },
        "nestedLevelRefId": {
          "type": "integer",
          "description": "RefId of the treatment variable level on the nested side of relationship.  This should reference a _refId defined on a level"
        }
      }
    },
    "TreatmentVariableRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the treatment variable"
        },
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ClusterRequest"
          }
        },
        "tier": {
          "type": "integer",
          "description": "the tier of the split that the variable is part of"
        },
        "isBlockingFactorOnly": {
          "type": "boolean",
          "description": "indicates whether the treatment variable should be analyzed or if it only exists to enable blocking"
        }
      }
    },
    "TreatmentVariableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for entity"
        },
        "name": {
          "type": "string",
          "description": "name of the treatment variable."
        },
        "refTreatmentVariableType": {
          "type": "integer",
          "description": "id of TreatmentVariableType entity"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "tier": {
          "type": "integer",
          "description": "tier is used categorize treatment variables in to main/sub/sub-sub etc  plots (valid Range : 1 to 10)"
        },
        "isBlockingFactorOnly": {
          "type": "boolean",
          "description": "indicates whether the treatment variable should be analyzed or if it only exists to enable blocking"
        }
      }
    },
    "UnitSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "uomType": {
          "type": "string",
          "description": "Type of the unit of measure this specification uses"
        },
        "refUnitTypeId": {
          "type": "integer",
          "description": "Reference to Unit Type"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "UnitSpecificationDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomCode": {
          "type": "string",
          "description": "Id of the Unit of Measure reference"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "UnitSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomCode": {
          "type": "string",
          "description": "Reference to Unit of Measure"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        }
      }
    },
    "UnitSpecificationDetailPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the Unit Specification Detail to update"
        },
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomCode": {
          "type": "string",
          "description": "Reference to Unit of Measure"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        }
      }
    },
    "UnitType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "VariablesRequestPayload": {
      "type": "object",
      "properties": {
        "treatmentVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TreatmentVariableRequest"
          }
        },
        "responseVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseVariable"
          }
        },
        "treatmentVariableAssociations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TreatmentVariableAssociationRequest"
          }
        }
      }
    },
    "VariablesResponse": {
      "type": "object",
      "properties": {
        "treatmentVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TreatmentVariable"
          }
        },
        "responseVariables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResponseVariable"
          }
        },
        "treatmentVariableAssociations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TreatmentVariableAssociationResponse"
          }
        }
      }
    }
  }
}
