{
  "swagger": "2.0",
  "info": {
    "title": "Experiments API",
    "description": "Experiment APIs to create experiment model, requires oauth_resourceownerinfo http header",
    "version": "v1"
  },
  "host": "api01-np.agro.services",
  "schemes": [
    "https"
  ],
  "basePath": "/experiments-api",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/combination-elements": {
      "post": {
        "summary": "post one or more combination element entities",
        "description": "Creates new combination element entities in Experiments System.\n",
        "operationId": "postCombination-elements",
        "tags": [
          "Combination Elements"
        ],
        "parameters": [
          {
            "name": "Combination Elements",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinationElementPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Combination Element Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one or more combination element entities",
        "description": "Update combination element in Experiments System.\n",
        "operationId": "putCombination-elements",
        "tags": [
          "Combination Elements"
        ],
        "parameters": [
          {
            "name": "Combination Elements",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinationElementPayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/combination-elements/{id}": {
      "get": {
        "summary": "get one combination-element entity",
        "description": "The combination-elements endpoint returns information about the combination elements entity in Experiments System.\n",
        "operationId": "getCombination-elementsById",
        "tags": [
          "Combination Elements"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "combination-element entity",
            "schema": {
              "$ref": "#/definitions/CombinationElementResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Combination Element Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one combination element Response entity",
        "description": "delete combination element entity in Experiments System.\n",
        "operationId": "deleteCombination-elementsById",
        "tags": [
          "Combination Elements"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Combination Element Deleted",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Combination Element Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/composites/treatments": {
      "post": {
        "summary": "post one or more treatments and combination elements entities",
        "description": "Creates/updates treatments and combination elements in Experiments System.\n Request json has add , delete and update sections for treatments. API does action on a section with values and empty sections are ignored. So if add and delete sections are empty and update has treatments then only update action will happen. Combination elements within treatments needs to be complete. New combination element without id will be added and combination element with id will be updated, any combination element not included within treatment will be deleted.",
        "operationId": "postComposites_treatments",
        "tags": [
          "Composites"
        ],
        "parameters": [
          {
            "name": "Composites Treatments",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Composite-Treatments operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/composites/unit-specification-details": {
      "post": {
        "summary": "post one or more unit specification detail entities",
        "description": "Creates/updates/deletes unit specification detail entities put into a JSON body",
        "operationId": "postComposites_unit-specification-details",
        "tags": [
          "Unit Specification Detail"
        ],
        "parameters": [
          {
            "name": "Composites Unit Specification Details",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeUnitSpecificationDetailPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Composite-Unit Specification Details operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dependent-variables/{id}": {
      "get": {
        "summary": "get one dependent variable entity",
        "description": "The dependent variables endpoint returns information about the dependent variable entities in Experiments System.\n",
        "operationId": "getDependent-variablesById",
        "tags": [
          "Dependent Variables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "dependent Variable entity",
            "schema": {
              "$ref": "#/definitions/DependentVariableResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Dependent Variable Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one Dependent Variable entity",
        "description": "delete Dependent Variable entity in Experiments System.\n",
        "operationId": "deleteDependent-variablesById",
        "tags": [
          "Dependent Variables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Dependent Variable Deleted",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Dependent Variable Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/dependent-variables": {
      "post": {
        "summary": "post one or more dependent variable entities",
        "description": "Creates new Dependent Variables in Experiments System.\n",
        "operationId": "postDependent-variables",
        "tags": [
          "Dependent Variables"
        ],
        "parameters": [
          {
            "name": "DependentVariables ",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependentVariablePayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Dependent Variable Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one or more dependent variable entities",
        "description": "Update Dependent Variables in Experiments System.\n",
        "operationId": "putDependent-variables",
        "tags": [
          "Dependent Variables"
        ],
        "parameters": [
          {
            "name": "DependentVariables",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependentVariablePayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experimental-units": {
      "post": {
        "summary": "post one or more experimental unit entities",
        "description": "Creates new experimental unit entities in Experiments System.\n",
        "operationId": "postExperimental-units",
        "tags": [
          "Experimental Units"
        ],
        "parameters": [
          {
            "name": "Experimental Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Experimental Unit Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one or more Experimental Unit entities",
        "description": "Update Experimental Unit in Experiments System.\n",
        "operationId": "putExperimental-units",
        "tags": [
          "Experimental Units"
        ],
        "parameters": [
          {
            "name": "Experimental Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitPayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experimental-units/{id}": {
      "get": {
        "summary": "get one experimental unit entity",
        "description": "The experimental-units endpoint returns information about the experimental unit entity in Experiments System.\n",
        "operationId": "getExperimental-unitsById",
        "tags": [
          "Experimental Units"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experimental Unit entity",
            "schema": {
              "$ref": "#/definitions/ExperimentalUnitResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experimental Unit Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one experimental unit entity",
        "description": "delete experimental unit entity in Experiments System.\n",
        "operationId": "deleteExperimental-unitsById",
        "tags": [
          "Experimental Units"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Experimental Unit Deleted",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experimental Unit Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/groups": {
      "get": {
        "summary": "Get all groups by experiment id",
        "description": "Returns all groups for experiment\n",
        "operationId": "getGroupsByExperimentId",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of groups",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Group"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "summary": "Get TagNames based on the queryText",
        "description": "Returns all tagNames containing the queryText",
        "operationId": "getTagNames",
        "tags": [
          "tagSearch"
        ],
        "parameters": [
          {
            "name": "tagName",
            "in": "query",
            "description": "Tag name text",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Tag Names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/tags/{tagName}": {
      "get": {
        "summary": "search TagValue contains in All Tag Values for a TagName",
        "description": "search TagValue contains in All Tag Values for a TagName",
        "operationId": "searchTagValueForTagName",
        "tags": [
          "tagSearch"
        ],
        "parameters": [
          {
            "name": "tagValue",
            "in": "query",
            "description": "Tag value text",
            "required": false,
            "type": "string"
          },
          {
            "name": "tagName",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of Tag Names",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiment-designs": {
      "get": {
        "summary": "Get all experiment designs",
        "description": "Returns all experiment designs that can be used\n",
        "operationId": "getExperiment-designs",
        "tags": [
          "Experiment Designs"
        ],
        "responses": {
          "200": {
            "description": "Array of experiment designs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentDesign"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Adds a new experiment design",
        "description": "Posts a new experiment design",
        "operationId": "postExperiment-designs",
        "tags": [
          "Experiment Designs"
        ],
        "parameters": [
          {
            "name": "experimentDesign",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentDesignPayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ID of newly created experiment design",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiment-designs/{id}": {
      "get": {
        "summary": "Get one experiment design entity",
        "description": "Returns a single experiment design entity\n",
        "operationId": "getExperiment-designById",
        "tags": [
          "Experiment Designs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Array of experiment designs",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentDesign"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Experiment Design Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update one experiment design",
        "description": "Updates a single experiment design entity\n",
        "operationId": "putExperiment-designById",
        "tags": [
          "Experiment Designs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "experimentDesign",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentDesignPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Experiment Design entity",
            "schema": {
              "$ref": "#/definitions/ExperimentDesign"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Experiment Design Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes one experiment design",
        "description": "Deletes a single experiment design entity\n",
        "operationId": "deleteExperiment-designById",
        "tags": [
          "Experiment Designs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Experiment Design entity",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Experiment Design Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments": {
      "get": {
        "summary": "get all experiment entities",
        "description": "This endpoint returns information about the experiments.\n",
        "operationId": "getExperiments",
        "tags": [
          "Experiments"
        ],
        "parameters": [
          {
            "name": "tags.name",
            "in": "query",
            "description": "Tag names comma separated list",
            "required": false,
            "type": "string"
          },
          {
            "name": "tags.value",
            "in": "query",
            "description": "Tag values comma separated list",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of experiments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentResponse"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more experiment entities",
        "description": "Creates new experiments in Experiments System.\n",
        "operationId": "postExperiments",
        "tags": [
          "Experiments"
        ],
        "parameters": [
          {
            "name": "experiment",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentPayload"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Experiment Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}": {
      "get": {
        "summary": "get one experiment entity",
        "description": "The Experiments endpoint returns information about the experiment entities in Experiments System.\n",
        "operationId": "getExperimentById",
        "tags": [
          "Experiments"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one experiment entity",
        "description": "update experiment entity in Experiments System.\n",
        "operationId": "putExperimentById",
        "tags": [
          "Experiments"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExperimentPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment entity",
            "schema": {
              "$ref": "#/definitions/ExperimentResponse"
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one experiment entity",
        "description": "delete experiment entity in Experiments System.\n",
        "operationId": "deleteExperimentById",
        "tags": [
          "Experiments"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Experiment Deleted",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/composites/treatments": {
      "get": {
        "summary": "get all treatments and combination elements for a given experiment id",
        "description": "This endpoint returns information about the treatment and and combination elements entities associated with an Experiment",
        "operationId": "getComposites_TreatmentsByExperimentId",
        "tags": [
          "Composites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeTreatmentsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/composites/group-experimental-units": {
      "get": {
        "summary": "get all groups , groupvalues and Units  for a given experiment id",
        "description": "This endpoint returns information about the group,groupValues and  experimental Units entities associated with an Experiment",
        "operationId": "getComposites_Group-experimental-unitsByExperimentId",
        "tags": [
          "Composites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "GroupsAndUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeGroupsAndUnitsResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more groups,groupvalues and experimental Units entities",
        "description": "This Service would delete the existing groups groupValues and ExperimentalUnits for the experimentId and then recreates them based on request Payload",
        "operationId": "postComposites_Group-experimental-unitsByExperimentId",
        "tags": [
          "Composites"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Composites Groups And Units",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompositeGroupsAndUnitsPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "composite group-experimental-units operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/dependent-variables": {
      "get": {
        "summary": "get all dependent variables for given experiment id.",
        "description": "This endpoint returns information about the dependent variable entities associated with one Experiment.\n",
        "operationId": "getDependentVariablesByExperimentId",
        "tags": [
          "Dependent Variables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Dependent Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DependentVariableResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for a given experiment id",
        "description": "This endpoint returns information about the experimental units entities associated with an Experiment",
        "operationId": "getExperimentalUnitsByExperimentId",
        "tags": [
          "Experimental Units"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ExperimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/factors": {
      "get": {
        "summary": "get all factors  for given experiment id.",
        "description": "This endpoint returns information about the factor entities associated with one Experiment.\n",
        "operationId": "getFactorsByExperimentId",
        "tags": [
          "Factors"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Factors",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/summary": {
      "get": {
        "summary": "get the experiment summary for given experiment id.",
        "description": "This endpoint returns summary information about the experiment, such as name, number of variables, etc.\n",
        "operationId": "getSummaryByExperimentId",
        "tags": [
          "Experiment Summary"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Experiment Summary",
            "schema": {
              "$ref": "#/definitions/ExperimentSummary"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/treatments": {
      "get": {
        "summary": "get all treatments for a given experiment id",
        "description": "This endpoint returns information about the treatment entities associated with an Experiment",
        "operationId": "getTreatmentsByExperimentId",
        "tags": [
          "Treatments"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Treatments",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Treatment"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/unit-specification-details/": {
      "get": {
        "summary": "Get all unit specification details for an experiment",
        "description": "Returns all unit specification details for an experiment\n",
        "operationId": "getUnit-specification-detailsByExperimentId",
        "tags": [
          "Unit Specification Detail"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetail"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "post one or more unit specification detail entities",
        "description": "Creates/updates unit specification details for an experiment",
        "operationId": "postUnit-specification-detailsByExperimentId",
        "tags": [
          "Unit Specification Detail"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Unit Specification Details",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetailPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "updates one or more unit specification detail entities",
        "description": "Creates/updates unit specification details for an experiment",
        "operationId": "putUnit-specification-detailsByExperimentId",
        "tags": [
          "Unit Specification Detail"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          },
          {
            "name": "Unit Specification Details",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecificationDetailPayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail operation SUCCESS"
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Some Unit Specification Details Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/experiments/{id}/variables": {
      "get": {
        "summary": "get all variables for given experiment id.",
        "description": "This endpoint returns information about the variable entities associated with one Experiment.\n",
        "operationId": "getVariablesByExperimentId",
        "tags": [
          "Variables"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Variables",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/VariablesResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factors/{id}": {
      "get": {
        "summary": "get one factor entity",
        "description": "The factors endpoint returns information about the factor entities in Experiments System.\n",
        "operationId": "getFactorsById",
        "tags": [
          "Factors"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "factor entity",
            "schema": {
              "$ref": "#/definitions/FactorResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Factor Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one factor entity",
        "description": "delete factor entity in Experiments System.\n",
        "operationId": "deleteFactorsById",
        "tags": [
          "Factors"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Factor Deleted",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Factor Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factors/{id}/factor-levels": {
      "get": {
        "summary": "get all factors  for given factor id.",
        "description": "This endpoint returns information about the factor entities associated with one Factor.\n",
        "operationId": "getFactor-levelsByFactorId",
        "tags": [
          "Factor Levels"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Factors",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Experiment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factors": {
      "post": {
        "summary": "post one or more factor entities",
        "description": "Creates new factor entity in Experiments System.\n",
        "operationId": "postFactors",
        "tags": [
          "Factors"
        ],
        "parameters": [
          {
            "name": "Factors ",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Factor Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one or more factor entities",
        "description": "Update factor in Experiments System.\n",
        "operationId": "putFactors",
        "tags": [
          "Factors"
        ],
        "parameters": [
          {
            "name": "Factors",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorPayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-levels/{id}": {
      "get": {
        "summary": "get one factor level entity",
        "description": "The factor-levels endpoint returns information about the factor level entity in Experiments System.\n",
        "operationId": "getFactor-levelById",
        "tags": [
          "Factor Levels"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "factor-level entity",
            "schema": {
              "$ref": "#/definitions/FactorLevelResponse"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Factor Level Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one factor level entity",
        "description": "delete factor level entity in Experiments System.\n",
        "operationId": "deleteFactor-levelById",
        "tags": [
          "Factor Levels"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Factor Level Deleted",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Factor Level Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-levels": {
      "post": {
        "summary": "post one or more factor level entities",
        "description": "Creates new factor level entities in Experiments System.\n",
        "operationId": "postFactor-levels",
        "tags": [
          "Factor Levels"
        ],
        "parameters": [
          {
            "name": "Factor Levels ",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorLevelPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Factor Level Created",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "put one or more factor level entities",
        "description": "Update factor level in Experiments System.\n",
        "operationId": "putFactor-levels",
        "tags": [
          "Factor Levels"
        ],
        "parameters": [
          {
            "name": "Factor Levels",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorLevelPayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid/Problematic Input",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Error"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-types": {
      "get": {
        "summary": "Get all factor types",
        "description": "Returns all factor types that can be used\n",
        "operationId": "getFactorTypes",
        "tags": [
          "Factor Types"
        ],
        "responses": {
          "200": {
            "description": "Array of factor types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FactorType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "post": {
        "summary": "Adds a new factor type",
        "description": "Creates a new factor type",
        "operationId": "postFactorTypes",
        "tags": [
          "Factor Types"
        ],
        "parameters": [
          {
            "name": "factorType",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/FactorTypePayload"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "ID of newly created factor type",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/factor-types/{id}": {
      "get": {
        "summary": "Get one factor type entity",
        "description": "Returns a single factor type entity\n",
        "operationId": "getFactorTypeById",
        "tags": [
          "Factor Types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Factor Type Entity",
            "schema": {
              "$ref": "#/definitions/FactorType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Factor Type Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Update one factor type",
        "description": "Updates a single factor type entity\n",
        "operationId": "putFactorTypeById",
        "tags": [
          "Factor Types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          },
          {
            "name": "factorType",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FactorTypePayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Updated Factor Type entity",
            "schema": {
              "$ref": "#/definitions/FactorType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Factor Type Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "Deletes one factor type",
        "description": "Deletes a single factor type entity\n",
        "operationId": "deleteFactorTypeById",
        "tags": [
          "Factor Types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Experimental Design entity",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Factor Type Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "summary": "Get one group entity",
        "description": "Returns a single group entity\n",
        "operationId": "getGroupById",
        "tags": [
          "Groups"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group Entity",
            "schema": {
              "$ref": "#/definitions/Group"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/groups/{id}/group-values": {
      "get": {
        "summary": "Get all group values for a particular group",
        "description": "Returns all group values for a single group\n",
        "operationId": "getGroupValuesByGroupId",
        "tags": [
          "Group Value"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group Values",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupValue"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/group-types": {
      "get": {
        "summary": "Get all group types",
        "description": "Returns all group types that can be used\n",
        "operationId": "getGroupTypes",
        "tags": [
          "Group Types"
        ],
        "responses": {
          "200": {
            "description": "Array of group types",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupType"
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/group-types/{id}": {
      "get": {
        "summary": "Get one group type entity",
        "description": "Returns a single group type entity\n",
        "operationId": "getGroupTypeById",
        "tags": [
          "Group Types"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "string",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Group Type Entity",
            "schema": {
              "$ref": "#/definitions/GroupType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Type Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/group-values/{id}": {
      "get": {
        "summary": "Get on group value entity",
        "description": "Returns a single group entity\n",
        "operationId": "getGroup-ValueById",
        "tags": [
          "Group Value"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Group Value Entity",
            "schema": {
              "$ref": "#/definitions/GroupValue"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Group Value Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/ref-data-source-types": {
      "get": {
        "summary": "Gets all Reference Data Source Types and all their defined Data Sources",
        "description": "Returns an array of reference data source types and their data sources",
        "operationId": "getRefDataSourceTypes",
        "tags": [
          "Ref Data Sources"
        ],
        "responses": {
          "200": {
            "description": "All Reference Data Source Type Entities With Data Sources",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/RefDataSourceTypeWithSources"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments": {
      "post": {
        "summary": "Add treatments",
        "description": "Creates new treatments",
        "operationId": "postTreatments",
        "tags": [
          "Treatments"
        ],
        "parameters": [
          {
            "name": "Treatments",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TreatmentsRequestPayloadForPOST"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CreateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "put": {
        "summary": "Updates treatments",
        "description": "Updates existing treatments",
        "operationId": "putTreatments",
        "tags": [
          "Treatments"
        ],
        "parameters": [
          {
            "name": "Treatments",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TreatmentsRequestPayloadForPUT"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UpdateResponse"
              }
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments/{id}": {
      "get": {
        "summary": "Get one treatment entity",
        "description": "Gets a treatment entity for the given treatment id",
        "operationId": "getTreatmentById",
        "tags": [
          "Treatments"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Single Treatment Entity",
            "schema": {
              "$ref": "#/definitions/Treatment"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Treatment Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      },
      "delete": {
        "summary": "delete one treatment entity",
        "description": "Deletes a treatment entity for the given treatment id",
        "operationId": "deleteTreatmentById",
        "tags": [
          "Treatments"
        ],
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted Treatment Entity",
            "schema": {
              "type": "number"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Treatment Does Not Exist",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments/{id}/combination-elements": {
      "get": {
        "summary": "get all combination elements  for given treatment id.",
        "description": "This endpoint returns information about the combination-elements entities associated with one treatment.\n",
        "operationId": "getCombination-elementsByTreatmentId",
        "tags": [
          "Combination Elements"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "CombinationElements",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CombinationElementResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Treatment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/treatments/{id}/experimental-units": {
      "get": {
        "summary": "get all experimental units for given treatment id.",
        "description": "This endpoint returns information about the experimental units entities associated with one treatment.\n",
        "operationId": "getExperimentalUnitsByTreatmentId",
        "tags": [
          "Experimental Units"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ExperimentalUnits",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ExperimentalUnitResponse"
              }
            }
          },
          "400": {
            "description": "Invalid ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "No Treatment Found For ID",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-specifications/": {
      "get": {
        "summary": "Get all unit specification entities",
        "description": "Returns all unit specifications\n",
        "operationId": "getUnitSpecifications",
        "tags": [
          "Unit Specification"
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitSpecification"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-specifications/{id}": {
      "get": {
        "summary": "Get a unit specification entity",
        "description": "Returns a unit specification\n",
        "operationId": "getUnitSpecificationById",
        "tags": [
          "Unit Specification"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Entity",
            "schema": {
              "$ref": "#/definitions/UnitSpecification"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unit Specification Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-specification-details/{id}": {
      "get": {
        "summary": "Get a unit specification detail entity",
        "description": "Returns a unit specification detail\n",
        "operationId": "getUnitSpecificationDetailById",
        "tags": [
          "Unit Specification Detail"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Specification Detail Entity",
            "schema": {
              "$ref": "#/definitions/UnitSpecificationDetail"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unit Specification Detail Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-types/": {
      "get": {
        "summary": "Get all unit type entities",
        "description": "Returns all unit types\n",
        "operationId": "getUnitTypes",
        "tags": [
          "Unit Type"
        ],
        "responses": {
          "200": {
            "description": "Unit Type Entities",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/UnitType"
              }
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/unit-types/{id}": {
      "get": {
        "summary": "Get a unit type entity",
        "description": "Returns a unit type\n",
        "operationId": "getUnitTypeById",
        "tags": [
          "Unit Type"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "type": "integer",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Unit Type Entity",
            "schema": {
              "$ref": "#/definitions/UnitType"
            }
          },
          "400": {
            "description": "Invalid Request",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "404": {
            "description": "Unit Type Not Found",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    },
    "/variables": {
      "post": {
        "summary": "Add variables",
        "description": "Creates a new variables, clears existing variables when new variables are provided",
        "operationId": "postVariables",
        "tags": [
          "Variables"
        ],
        "parameters": [
          {
            "name": "Variables",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/VariablesRequestPayload"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "string"
            }
          },
          "400": {
            "description": "Invalid body",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CombinationElementPayloadForPOST": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the combinationElement."
        },
        "value": {
          "type": "string",
          "description": "value of the combinationElement."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity."
        }
      }
    },
    "CombinationElementPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of combinationElement to update."
        },
        "name": {
          "type": "string",
          "description": "name of the combinationElement."
        },
        "value": {
          "type": "string",
          "description": "value of the combinationElement."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity."
        }
      }
    },
    "TagPayloadForPOST": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the combinationElement."
        },
        "value": {
          "type": "string",
          "description": "value of the combinationElement."
        },
        "experimentId": {
          "type": "integer",
          "description": "id of treatment entity."
        }
      }
    },
    "CombinationElementResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "name": {
          "type": "string",
          "description": "name of the combination element."
        },
        "value": {
          "type": "string",
          "description": "value of the combination element."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "CompositeGroupsAndUnitsPOST": {
      "type": "object",
      "properties": {
        "refRandomizationStrategyId": {
          "type": "integer",
          "description": "reference to RandomizationStrategy Table"
        },
        "refGroupTypeId": {
          "type": "integer",
          "description": "reference to GroupType Table"
        },
        "groupValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupValueCompositeOperation"
          }
        },
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentalUnitCompositeOperation"
          }
        },
        "childGroups": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeGroupsAndUnitsPOST"
          }
        }
      }
    },
    "CompositeGroupsAndUnitsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for group entity"
        },
        "parentId": {
          "type": "integer",
          "description": "reference to parent Group"
        },
        "refRandomizationStrategyId": {
          "type": "integer",
          "description": "reference to RandomizationStrategy Table"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experimentId entity"
        },
        "groupValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GroupValueResponseWithoutAuditKeys"
          }
        },
        "units": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExperimentalUnitResponseWithoutAuditKeys"
          }
        }
      }
    },
    "CompositeTreatmentsCombinationElement": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of combination element if updating existing else empty."
        },
        "name": {
          "type": "string",
          "description": "name of the combinationElement."
        },
        "value": {
          "type": "string",
          "description": "value of the combinationElement."
        }
      }
    },
    "CompositeTreatmentsPayloadAdd": {
      "type": "object",
      "properties": {
        "isControl": {
          "type": "string",
          "description": "boolean value isControl to mark treatment as control."
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment."
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsCombinationElement"
          }
        }
      }
    },
    "CompositeTreatmentsPayloadForPOST": {
      "type": "object",
      "properties": {
        "adds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsPayloadAdd"
          }
        },
        "deletes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ids"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsPayloadUpdate"
          }
        }
      }
    },
    "CompositeTreatmentsPayloadUpdate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of treatment id to update."
        },
        "isControl": {
          "type": "string",
          "description": "boolean value isControl to mark treatment as control."
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment."
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CompositeTreatmentsCombinationElement"
          }
        }
      }
    },
    "CompositeTreatmentsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "isControl": {
          "type": "boolean",
          "description": "isControl boolean value to mark a treatment as control"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "number of the treatment."
        },
        "notes": {
          "type": "string",
          "description": "notes related to treatment - optinal field."
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experimentId entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "combinationElements": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CombinationElementResponse"
          }
        }
      }
    },
    "CompositeUnitSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "adds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitSpecificationDetailPayloadForPOST"
          }
        },
        "deletes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ids"
          }
        },
        "updates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UnitSpecificationDetailPayloadForPUT"
          }
        }
      }
    },
    "CreateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "http status code, 201 for success and 4.x.x for errors."
        },
        "message": {
          "type": "string",
          "description": "Resource created or error description in case of error."
        },
        "id": {
          "type": "integer",
          "description": "id of newely created resource or black in case of error."
        }
      }
    },
    "DependentVariable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "required": {
          "type": "boolean",
          "description": "required or optional boolean value"
        },
        "questionCode": {
          "type": "string",
          "description": "refers to Q&A application , its an optional field"
        }
      }
    },
    "DependentVariablePayloadForPOST": {
      "type": "object",
      "properties": {
        "required": {
          "type": "boolean",
          "description": "is required boolean value."
        },
        "name": {
          "type": "string",
          "description": "name of dependent variable."
        },
        "experimentId": {
          "type": "integer",
          "description": "experimentId of experiment entity."
        },
        "questionCode": {
          "type": "string",
          "description": "Refers to Q&A question Code,its an optional field"
        }
      }
    },
    "DependentVariablePayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of dependent variable to update."
        },
        "required": {
          "type": "boolean",
          "description": "is required boolean value."
        },
        "name": {
          "type": "string",
          "description": "name of dependent variable."
        },
        "experimentId": {
          "type": "integer",
          "description": "experimentId of experiment entity."
        },
        "questionCode": {
          "type": "string",
          "description": "Refers to Q&A question Code"
        }
      }
    },
    "DependentVariableResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "required": {
          "type": "boolean",
          "description": "boolean value to specify dependent variable is required or not."
        },
        "name": {
          "type": "string",
          "description": "name of dependent variable."
        },
        "experimentId": {
          "type": "integer",
          "description": "ExperimentId of experiment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "questionCode": {
          "type": "string",
          "description": "Refers to Q&A question Code"
        }
      }
    },
    "Error": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "ExperimentalUnitCompositeOperation": {
      "type": "object",
      "properties": {
        "treatmentId": {
          "type": "integer",
          "description": "id of treatmentId entity."
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit."
        }
      }
    },
    "ExperimentalUnitPayloadForPOST": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id"
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatmentId entity."
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit."
        }
      }
    },
    "ExperimentalUnitPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of experimental unit to update."
        },
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id"
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatmentId entity."
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit."
        }
      }
    },
    "ExperimentalUnitResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "ExperimentalUnitResponseWithoutAuditKeys": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "groupId": {
          "type": "integer",
          "description": "experimental unit's group id."
        },
        "treatmentId": {
          "type": "integer",
          "description": "id of treatment entity"
        },
        "rep": {
          "type": "integer",
          "description": "rep number of experimental unit"
        }
      }
    },
    "ExperimentDesign": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id for experiment design entity"
        },
        "name": {
          "type": "string",
          "description": "name of experiment design"
        }
      }
    },
    "ExperimentDesignPayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of experiment design"
        }
      }
    },
    "ExperimentPayload": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the experiment entity."
        },
        "description": {
          "type": "string",
          "description": "Description of the Experiment."
        },
        "experimentDesign": {
          "type": "string",
          "description": "ExperimentDesign Type."
        },
        "status": {
          "type": "string",
          "description": "status of the experiment entity."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TagPayloadForPOST"
          }
        }
      }
    },
    "ExperimentResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for experiment entity"
        },
        "name": {
          "type": "string",
          "description": "name of the experiment entity."
        },
        "description": {
          "type": "string",
          "description": "description of the Experiment."
        },
        "ExperimentDesign": {
          "type": "string",
          "description": "Experiment Design Type"
        },
        "status": {
          "type": "string",
          "description": "status of the experiment entity."
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tags"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "ExperimentSummary": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of the experiment."
        },
        "name": {
          "type": "string",
          "description": "name of the experiment."
        },
        "numberOfVariables": {
          "type": "integer",
          "description": "the number of variables associated with the experiment."
        },
        "numberOfTreatments": {
          "type": "integer",
          "description": "the number of treatments associated with the experiment."
        },
        "numberOfExperimentalUnits": {
          "type": "integer",
          "description": "the number of experimental units associated with the experiment."
        },
        "numberOfUnitSpecs": {
          "type": "integer",
          "description": "the number of unit specs associated with the experiment."
        },
        "nameOfUnitType": {
          "type": "string",
          "description": "Name of experimental unit associated with the experiment."
        }
      }
    },
    "FactorLevelPayloadForPOST": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "value of the factor."
        },
        "factorId": {
          "type": "integer",
          "description": "id of Factor entity."
        }
      }
    },
    "FactorLevelPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of factorLevel to update."
        },
        "value": {
          "type": "string",
          "description": "value of the factor."
        },
        "factorId": {
          "type": "integer",
          "description": "id of Factor entity."
        }
      }
    },
    "FactorLevelResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "value": {
          "type": "string",
          "description": "value of the factor level."
        },
        "factorId": {
          "type": "integer",
          "description": "id of Factor entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "FactorPayloadForPOST": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of the factor."
        },
        "refFactorTypeId": {
          "type": "integer",
          "description": "id of FactorType entity."
        },
        "refDataSourceId": {
          "type": "integer",
          "description": "id of the dataSource entity"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity."
        },
        "tier": {
          "type": "integer",
          "description": "tier is used categorize factors in to mainplots/sub/plots/sub-sub-plots(valid Range : 1 to 10)"
        }
      }
    },
    "FactorPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of factor to update."
        },
        "name": {
          "type": "string",
          "description": "name of the factor."
        },
        "refFactorTypeId": {
          "type": "integer",
          "description": "id of FactorType entity."
        },
        "refDataSourceId": {
          "type": "integer",
          "description": "id of the dataSource entity"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity."
        }
      }
    },
    "FactorResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "unique id for  entity"
        },
        "name": {
          "type": "string",
          "description": "name of the factor."
        },
        "refFactorTypeId": {
          "type": "integer",
          "description": "id of FactorType entity"
        },
        "refDataSourceId": {
          "type": "integer",
          "description": "id of the dataSource entity"
        },
        "experimentId": {
          "type": "integer",
          "description": "id of experiment entity"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        },
        "tier": {
          "type": "integer",
          "description": "tier is used categorize factors in to mainplots/sub/plots/sub-sub-plots(valid Range : 1 to 10"
        }
      }
    },
    "FactorType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id for factor type"
        },
        "type": {
          "type": "string",
          "description": "name of the factor type"
        }
      }
    },
    "FactorTypePayload": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "description": "name of the factor type"
        }
      }
    },
    "Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Group Id"
        },
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id"
        },
        "parentId ": {
          "type": "integer",
          "description": "parent group id of the group (optional)"
        },
        "refRandomizationStrategyId": {
          "type": "integer",
          "description": "Id of RandomizationStrategy "
        },
        "refGroupTypeId": {
          "type": "integer",
          "description": "Id of GroupType"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "GroupType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "unique id for group type"
        },
        "type": {
          "type": "string",
          "description": "name of the group type"
        }
      }
    },
    "GroupValue": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Group Value Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "value": {
          "type": "string",
          "description": "Value of the entity associated to the group"
        },
        "groupId": {
          "type": "integer",
          "description": "Group Id"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "GroupValueResponseWithoutAuditKeys": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Group Value Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "value": {
          "type": "string",
          "description": "Value of the entity associated to the group"
        },
        "groupId": {
          "type": "integer",
          "description": "Group Id"
        }
      }
    },
    "GroupValueCompositeOperation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "value": {
          "type": "string",
          "description": "Value of the entity associated to the group"
        }
      }
    },
    "ids": {
      "type": "integer"
    },
    "Levels": {
      "type": "string"
    },
    "RefDataSource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id of the data source"
        },
        "name": {
          "type": "string",
          "description": "name of the data source"
        },
        "refDataSourceTypeId": {
          "type": "integer"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "RefDataSourceTypeWithSources": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "id of the data source type"
        },
        "type": {
          "type": "string",
          "description": "name of the data source type"
        },
        "refDataSources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RefDataSource"
          }
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "Treatment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Treatment Id"
        },
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id of the treatment"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "Number of the treatment"
        },
        "isControl": {
          "type": "boolean",
          "description": "Specifies if treatment is a control treatment"
        },
        "notes": {
          "type": "string",
          "description": "Used to specify treatment information"
        }
      }
    },
    "TreatmentsRequestPayloadForPOST": {
      "type": "object",
      "properties": {
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id that treatment lives on"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "Number of the treatment"
        },
        "isControl": {
          "type": "boolean",
          "description": "Specifies if treatment is a control treatment"
        },
        "notes": {
          "type": "string",
          "description": "Used to specify treatment information"
        }
      }
    },
    "TreatmentsRequestPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Treatment Id"
        },
        "experimentId": {
          "type": "integer",
          "description": "Experiment Id that treatment lives on"
        },
        "treatmentNumber": {
          "type": "integer",
          "description": "Number of the treatment"
        },
        "isControl": {
          "type": "boolean",
          "description": "Specifies if treatment is a control treatment"
        },
        "notes": {
          "type": "string",
          "description": "Used to specify control treatment information"
        }
      }
    },
    "Variable": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "name of variable"
        },
        "levels": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Levels"
          }
        }
      }
    },
    "VariablesRequestPayload": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "experimentId"
        },
        "independent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "exogenous": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "dependent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentVariable"
          }
        }
      }
    },
    "VariablesResponse": {
      "type": "object",
      "properties": {
        "independent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "exogenous": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Variable"
          }
        },
        "dependent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentVariable"
          }
        }
      }
    },
    "UpdateResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "integer",
          "description": "http status code, 200 for success and 4.x.x for errors."
        },
        "message": {
          "type": "string",
          "description": "Resource updated or error description in case of error."
        },
        "id": {
          "type": "integer",
          "description": "id of updated resource or black in case of error."
        }
      }
    },
    "UnitSpecification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "uomType": {
          "type": "string",
          "description": "Type of the unit of measure this specification uses"
        },
        "refUnitTypeId": {
          "type": "integer",
          "description": "Reference to Unit Type"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "UnitSpecificationDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomId": {
          "type": "integer",
          "description": "Id of the Unit of Measure reference"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "UnitSpecificationDetailPayloadForPOST": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomId": {
          "type": "integer",
          "description": "Reference to Unit of Measure"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        }
      }
    },
    "UnitSpecificationDetailPayloadForPUT": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Id of the Unit Specification Detail to update"
        },
        "value": {
          "type": "string",
          "description": "Value of the unit specification detail"
        },
        "uomId": {
          "type": "integer",
          "description": "Reference to Unit of Measure"
        },
        "refUnitSpecId": {
          "type": "integer",
          "description": "Reference to Unit Specification"
        },
        "experimentId": {
          "type": "integer",
          "description": "Reference to Experiment"
        }
      }
    },
    "UnitType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Unit Type Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the entity the group is associated to"
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    },
    "Tags": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "description": "Tag Id"
        },
        "name": {
          "type": "string",
          "description": "Name of the tag"
        },
        "value": {
          "type": "string",
          "description": "value of the tag"
        },
        "experimentId": {
          "type": "string",
          "description": "tag associated to experiment "
        },
        "createdDate": {
          "type": "string",
          "description": "created timestamp in UTC."
        },
        "createdUserId": {
          "type": "string",
          "description": "created user id for audit tracking."
        },
        "modifiedDate": {
          "type": "string",
          "description": "Modified timestamp in UTC."
        },
        "modifiedUserId": {
          "type": "string",
          "description": "modified user id for audit tracking."
        }
      }
    }
  }
}